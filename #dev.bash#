(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
deracer inst=Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000914FC8, from = 0x6000025181C8, cause = 0x600000910848}
inst %!p(Deracer_Instance_Data=Deracer_Instance_Data{state = waitingForFirst, buffer = TwoMessages{first = <nil>, second = &Message{port = 2, datum = 0x600000914FC8, from = 0x6000025181C8, cause = 0x600000910848}}}) Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = &Message{port = "2", datum = 0x600000914FC8, from = 0x6000025181C8, cause = 0x600000910848}}}
deracer inst=Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000915C48, from = 0x60000251C2A8, cause = 0x600000914688}
inst %!p(Deracer_Instance_Data=Deracer_Instance_Data{state = waitingForFirst, buffer = TwoMessages{first = <nil>, second = &Message{port = 2, datum = 0x600000915C48, from = 0x60000251C2A8, cause = 0x600000914688}}}) Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = &Message{port = "2", datum = 0x600000915C48, from = 0x60000251C2A8, cause = 0x600000914688}}}
deracer inst=Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000911288, from = 0x60000251D428, cause = 0x600000914708}
inst %!p(Deracer_Instance_Data=Deracer_Instance_Data{state = waitingForFirst, buffer = TwoMessages{first = <nil>, second = &Message{port = 2, datum = 0x600000911288, from = 0x60000251D428, cause = 0x600000914708}}}) Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = &Message{port = "2", datum = 0x600000911288, from = 0x60000251D428, cause = 0x600000914708}}}
deracer inst=Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000911C88, from = 0x60000251D508, cause = 0x600000914788}
--- Outputs ---
[]
<nil>
(base) $ pwd
pwd
/Users/tarvydas/quicklisp/local-projects/find-and-replace
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D408C8, from = 0x6000031441C8, cause = 0x600001D44848}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D41548, from = 0x6000031402A8, cause = 0x600001D48608}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D41F48, from = 0x600003141428, cause = 0x600001D48688}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D41508}} msg=&Message{port = "1", datum = 0x600001D42948, from = 0x600003141508, cause = 0x600001D48708}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D41F08}} msg=&Message{port = "1", datum = 0x600001D42C08, from = 0x600003141188, cause = 0x600001D41508}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D40888}} msg=&Message{port = "1", datum = 0x600001D42F88, from = 0x600003141348, cause = 0x600001D41F08}
?1 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1030F01E0, reclaim = nil, asString = proc(^Datum) -> string @ 1030F06B0}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D51FC8, from = 0x600003140A88, cause = 0x600001D43608}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D52788, from = 0x600003142AE8, cause = 0x600001D51288}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D52748, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D53308, from = 0x600003142BC8, cause = 0x600001D51208}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D535C8, from = 0x600003142848, cause = 0x600001D532C8}
?2 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1030F01E0, reclaim = nil, asString = proc(^Datum) -> string @ 1030F06B0}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D53588, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D54548, from = 0x600003142CA8, cause = 0x600001D51188}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D54988, from = 0x600003142A08, cause = 0x600001D54508}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D56088, from = 0x6000031416C8, cause = 0x600001D508C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D56048}} msg=&Message{port = "1", datum = 0x600001D56F88, from = 0x6000031417A8, cause = 0x600001D50848}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D57248, from = 0x600003143E28, cause = 0x600001D56048}
?3 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1030F01E0, reclaim = nil, asString = proc(^Datum) -> string @ 1030F06B0}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D54948, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D4DA88, from = 0x600003142E68, cause = 0x600001D4D0C8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D45488, from = 0x600003142148, cause = 0x600001D4DF88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D45888, from = 0x6000031433A8, cause = 0x600001D454C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D45448}} msg=&Message{port = "1", datum = 0x600001D45808, from = 0x6000031433A8, cause = 0x600001D454C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D45848}} msg=&Message{port = "1", datum = 0x600001D576C8, from = 0x600003143488, cause = 0x600001D45F88}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D57208, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D58748, from = 0x6000031432C8, cause = 0x600001D45848}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D51F88}} msg=&Message{port = "1", datum = 0x600001D58B88, from = 0x600003144008, cause = 0x600001D58708}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D4B508, from = 0x600003143728, cause = 0x600001D48C88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D4BCC8, from = 0x6000031457A8, cause = 0x600001D4A888}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D4BC88, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D5C788, from = 0x600003145888, cause = 0x600001D4A808}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D5CA48, from = 0x600003145508, cause = 0x600001D5C748}
?4 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1030F01E0, reclaim = nil, asString = proc(^Datum) -> string @ 1030F06B0}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D5CA08, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D5D908, from = 0x600003145968, cause = 0x600001D4A788}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001D57B88, from = 0x6000031456C8, cause = 0x600001D5D8C8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D65188, from = 0x600003144468, cause = 0x600001D4A248}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D65588, from = 0x6000031463E8, cause = 0x600001D651C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D65148}} msg=&Message{port = "1", datum = 0x600001D65508, from = 0x6000031463E8, cause = 0x600001D651C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D65548}} msg=&Message{port = "1", datum = 0x600001D664C8, from = 0x6000031464C8, cause = 0x600001D65C88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D46D48, from = 0x600003146308, cause = 0x600001D65548}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001D57B48, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D47888, from = 0x600003144548, cause = 0x600001D4A2C8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D68E48, from = 0x600003144E08, cause = 0x600001D47D88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D69248, from = 0x600003145DC8, cause = 0x600001D68E88}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D68E08}} msg=&Message{port = "1", datum = 0x600001D691C8, from = 0x600003145DC8, cause = 0x600001D68E88}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D69208}} msg=&Message{port = "1", datum = 0x600001D4E908, from = 0x600003145EA8, cause = 0x600001D66B08}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001D4F388, from = 0x600003145CE8, cause = 0x600001D69208}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D46D08}} msg=&Message{port = "1", datum = 0x600001D6C248, from = 0x600003146AE8, cause = 0x600001D4A348}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D4F348}} msg=&Message{port = "1", datum = 0x600001D6C508, from = 0x600003146848, cause = 0x600001D46D08}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001D4B4C8}} msg=&Message{port = "1", datum = 0x600001D6C888, from = 0x600003146A08, cause = 0x600001D4F348}
?5 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1030F01E0, reclaim = nil, asString = proc(^Datum) -> string @ 1030F06B0}
--- Outputs ---
[{«error» ⎨
⎬ &Message{port = "error", datum = 0x600001D49F08, from = 0x600003140A88, cause = 0x600001D43608}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x600001D49F88, from = 0x600003142148, cause = 0x600001D4DF88}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x600001D4A088, from = 0x600003143728, cause = 0x600001D48C88}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x600001D5E3C8, from = 0x600003144E08, cause = 0x600001D47D88}}, {«output» ⎨
⎬ &Message{port = "output", datum = 0x600001D5E448, from = 0x600003146148, cause = 0x600001D67708}}, {«error» ⎨Cannot read property 'rwr' of undefined
⎬ &Message{port = "error", datum = 0x600001D5E508, from = 0x600003146148, cause = 0x600001D67708}}]


(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(365:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("panic[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(380:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("Open Text File[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(400:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	... h_id := gensym("Low Level Read Text From FD[%d]", counter) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(466:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("syncfilewrite[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(427:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("Transpiler[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(494:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("suffix[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(531:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("hard_coded_rwr_semantics[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(558:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("bang[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(523:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("hard_coded_rwr_grammar[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(539:21) Too many arguments for 'gensym', expected 1 arguments, got 2
	name_with_id := gensym("hard_coded_rwr_support[%d]", counter)
	                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
make: *** [dev] Error 1
(base) $ make dev
*** output flushed ***
(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ make dev
*** output flushed ***
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001621C08, from = 0x600003A2C1C8, cause = 0x600001620B88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001622888, from = 0x600003A282A8, cause = 0x6000016212C8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001623288, from = 0x600003A29428, cause = 0x600001621348}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001622848}} msg=&Message{port = "1", datum = 0x600001623C88, from = 0x600003A29508, cause = 0x6000016213C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001623248}} msg=&Message{port = "1", datum = 0x600001623F48, from = 0x600003A29188, cause = 0x600001622848}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001621BC8}} msg=&Message{port = "1", datum = 0x6000016242C8, from = 0x600003A29348, cause = 0x600001623248}
?◦2 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1044CDAB0, reclaim = nil, asString = proc(^Datum) -> string @ 1044CE770}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001627708, from = 0x600003A28A88, cause = 0x600001624948}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001627EC8, from = 0x600003A2AAE8, cause = 0x6000016269C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001627E88, second = <nil>}} msg=&Message{port = "2", datum = 0x600001628AC8, from = 0x600003A2ABC8, cause = 0x600001626948}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600001628D88, from = 0x600003A2A848, cause = 0x600001628A88}
?◦22 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1044CDAB0, reclaim = nil, asString = proc(^Datum) -> string @ 1044CE770}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x600001628D48, second = <nil>}} msg=&Message{port = "2", datum = 0x600001629D08, from = 0x600003A2ACA8, cause = 0x6000016268C8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x60000163C1C8, from = 0x600003A2AA08, cause = 0x600001629CC8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000163D8C8, from = 0x600003A296C8, cause = 0x600001626008}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000163D888}} msg=&Message{port = "1", datum = 0x60000163E7C8, from = 0x600003A297A8, cause = 0x600001625F88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x60000163EA88, from = 0x600003A2BE28, cause = 0x60000163D888}
?◦42 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1044CDAB0, reclaim = nil, asString = proc(^Datum) -> string @ 1044CE770}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x60000163C188, second = <nil>}} msg=&Message{port = "2", datum = 0x60000162D708, from = 0x600003A2AE68, cause = 0x60000162CD48}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000162ED88, from = 0x600003A2A148, cause = 0x60000162DC08}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000162F188, from = 0x600003A2B3A8, cause = 0x60000162EDC8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000162ED48}} msg=&Message{port = "1", datum = 0x60000162F108, from = 0x600003A2B3A8, cause = 0x60000162EDC8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000162F148}} msg=&Message{port = "1", datum = 0x60000163EF08, from = 0x600003A2B488, cause = 0x600001630108}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x60000163EA48, second = <nil>}} msg=&Message{port = "2", datum = 0x600001608788, from = 0x600003A2B2C8, cause = 0x60000162F148}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000016276C8}} msg=&Message{port = "1", datum = 0x600001608BC8, from = 0x600003A2C008, cause = 0x600001608748}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000162AF88, from = 0x600003A2B728, cause = 0x600001609148}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x60000162B748, from = 0x600003A2D7A8, cause = 0x60000162A308}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x60000162B708, second = <nil>}} msg=&Message{port = "2", datum = 0x60000160C208, from = 0x600003A2D888, cause = 0x60000162A288}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x60000160C4C8, from = 0x600003A2D508, cause = 0x60000160C1C8}
?◦59 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1044CDAB0, reclaim = nil, asString = proc(^Datum) -> string @ 1044CE770}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x60000160C488, second = <nil>}} msg=&Message{port = "2", datum = 0x60000160D388, from = 0x600003A2D968, cause = 0x60000162A208}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x60000162F948, from = 0x600003A2D6C8, cause = 0x60000160D348}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001600F48, from = 0x600003A2C468, cause = 0x60000163FD48}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001601348, from = 0x600003A2E3E8, cause = 0x600001600F88}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001600F08}} msg=&Message{port = "1", datum = 0x6000016012C8, from = 0x600003A2E3E8, cause = 0x600001600F88}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001601308}} msg=&Message{port = "1", datum = 0x600001602288, from = 0x600003A2E4C8, cause = 0x600001601A48}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600001602B88, from = 0x600003A2E308, cause = 0x600001601308}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x60000162F908, second = <nil>}} msg=&Message{port = "2", datum = 0x6000016036C8, from = 0x600003A2C548, cause = 0x60000163FDC8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000160E008, from = 0x600003A2CE08, cause = 0x600001603BC8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000160E408, from = 0x600003A2DDC8, cause = 0x60000160E048}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000160DFC8}} msg=&Message{port = "1", datum = 0x60000160E388, from = 0x600003A2DDC8, cause = 0x60000160E048}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000160E3C8}} msg=&Message{port = "1", datum = 0x60000160F308, from = 0x600003A2DEA8, cause = 0x60000160EB08}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x60000160FD88, from = 0x600003A2DCE8, cause = 0x60000160E3C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x600001602B48}} msg=&Message{port = "1", datum = 0x60000161CC48, from = 0x600003A2EAE8, cause = 0x60000163FE48}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000160FD48}} msg=&Message{port = "1", datum = 0x60000161CF08, from = 0x600003A2E848, cause = 0x600001602B48}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x60000162AF48}} msg=&Message{port = "1", datum = 0x60000161D288, from = 0x600003A2EA08, cause = 0x60000160FD48}
?◦77 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1044CDAB0, reclaim = nil, asString = proc(^Datum) -> string @ 1044CE770}
--- Outputs ---
[{«error» ⎨
⎬ &Message{port = "error", datum = 0x60000163FA08, from = 0x600003A28A88, cause = 0x600001624948}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x60000163FA88, from = 0x600003A2A148, cause = 0x60000162DC08}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x60000163FB88, from = 0x600003A2B728, cause = 0x600001609148}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x600001638A88, from = 0x600003A2CE08, cause = 0x600001603BC8}}, {«output» ⎨
⎬ &Message{port = "output", datum = 0x600001638B08, from = 0x600003A2E148, cause = 0x6000016100C8}}, {«error» ⎨Cannot read property 'rwr' of undefined
⎬ &Message{port = "error", datum = 0x600001638BC8, from = 0x600003A2E148, cause = 0x6000016100C8}}]


(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003D9B08, from = 0x600002FD81C8, cause = 0x6000003D8A88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003DA788, from = 0x600002FDC2A8, cause = 0x6000003D91C8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003DB188, from = 0x600002FDD428, cause = 0x6000003D9248}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003DA748}} msg=&Message{port = "1", datum = 0x6000003DBB88, from = 0x600002FDD508, cause = 0x6000003D92C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003DB148}} msg=&Message{port = "1", datum = 0x6000003DBE48, from = 0x600002FDD188, cause = 0x6000003DA748}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003D9AC8}} msg=&Message{port = "1", datum = 0x6000003D0188, from = 0x600002FDD348, cause = 0x6000003DB148}
?◦2 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10CD77510, reclaim = nil, asString = proc(^Datum) -> string @ 10CD793E0}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003C8748, from = 0x600002FDCA88, cause = 0x6000003D0808}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003C8F08, from = 0x600002FDEAE8, cause = 0x6000003D1CC8}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003C8EC8, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003C9A88, from = 0x600002FDEBC8, cause = 0x6000003D1C48}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003DC288, from = 0x600002FDE848, cause = 0x6000003C9A48}
?◦22 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10CD77510, reclaim = nil, asString = proc(^Datum) -> string @ 10CD793E0}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003DC248, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003D2EC8, from = 0x600002FDECA8, cause = 0x6000003D1BC8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003C41C8, from = 0x600002FDEA08, cause = 0x6000003D2E88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003CE048, from = 0x600002FDD6C8, cause = 0x6000003CC8C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003CE008}} msg=&Message{port = "1", datum = 0x6000003CEF48, from = 0x600002FDD7A8, cause = 0x6000003CC848}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003CF208, from = 0x600002FDFE28, cause = 0x6000003CE008}
?◦42 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10CD77510, reclaim = nil, asString = proc(^Datum) -> string @ 10CD793E0}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003C4188, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003C5408, from = 0x600002FDEE68, cause = 0x6000003C4A48}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003C0088, from = 0x600002FDE148, cause = 0x6000003C5908}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003C0488, from = 0x600002FDF3A8, cause = 0x6000003C00C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003C0048}} msg=&Message{port = "1", datum = 0x6000003C0408, from = 0x600002FDF3A8, cause = 0x6000003C00C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003C0448}} msg=&Message{port = "1", datum = 0x6000003C13C8, from = 0x600002FDF488, cause = 0x6000003C0B88}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003CF1C8, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003C1E48, from = 0x600002FDF2C8, cause = 0x6000003C0448}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003C8708}} msg=&Message{port = "1", datum = 0x6000003C2288, from = 0x600002FD8008, cause = 0x6000003C1E08}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003FD008, from = 0x600002FDF728, cause = 0x6000003C2808}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003DDA48, from = 0x600002FD97A8, cause = 0x6000003FC388}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003DDA08, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003DE508, from = 0x600002FD9888, cause = 0x6000003FC308}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003DE7C8, from = 0x600002FD9508, cause = 0x6000003DE4C8}
?◦59 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10CD77510, reclaim = nil, asString = proc(^Datum) -> string @ 10CD793E0}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003DE788, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003DF688, from = 0x600002FD9968, cause = 0x6000003FC288}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x6000003DFAC8, from = 0x600002FD96C8, cause = 0x6000003DF648}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003F90C8, from = 0x600002FD8468, cause = 0x6000003DD188}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003F94C8, from = 0x600002FDA3E8, cause = 0x6000003F9108}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003F9088}} msg=&Message{port = "1", datum = 0x6000003F9448, from = 0x600002FDA3E8, cause = 0x6000003F9108}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003F9488}} msg=&Message{port = "1", datum = 0x6000003FA408, from = 0x600002FDA4C8, cause = 0x6000003F9BC8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003FAD08, from = 0x600002FDA308, cause = 0x6000003F9488}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000003DFA88, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003FB848, from = 0x600002FD8548, cause = 0x6000003DD208}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003F4E08, from = 0x600002FD8E08, cause = 0x6000003FBD48}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003F5208, from = 0x600002FD9DC8, cause = 0x6000003F4E48}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003F4DC8}} msg=&Message{port = "1", datum = 0x6000003F5188, from = 0x600002FD9DC8, cause = 0x6000003F4E48}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003F51C8}} msg=&Message{port = "1", datum = 0x6000003F6148, from = 0x600002FD9EA8, cause = 0x6000003F5908}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x6000003F6BC8, from = 0x600002FD9CE8, cause = 0x6000003F51C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003FACC8}} msg=&Message{port = "1", datum = 0x6000003F7A88, from = 0x600002FDAAE8, cause = 0x6000003DD288}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003F6B88}} msg=&Message{port = "1", datum = 0x6000003F7D48, from = 0x600002FDA848, cause = 0x6000003FACC8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000003FCFC8}} msg=&Message{port = "1", datum = 0x6000003F00C8, from = 0x600002FDAA08, cause = 0x6000003F6B88}
?◦77 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10CD77510, reclaim = nil, asString = proc(^Datum) -> string @ 10CD793E0}
--- Outputs ---
[{«error» ⎨
⎬ &Message{port = "error", datum = 0x6000003DCE48, from = 0x600002FDCA88, cause = 0x6000003D0808}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x6000003DCEC8, from = 0x600002FDE148, cause = 0x6000003C5908}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x6000003DCFC8, from = 0x600002FDF728, cause = 0x6000003C2808}}, {«error» ⎨
⎬ &Message{port = "error", datum = 0x6000003C67C8, from = 0x600002FD8E08, cause = 0x6000003FBD48}}, {«output» ⎨
⎬ &Message{port = "output", datum = 0x6000003C6848, from = 0x600002FDA148, cause = 0x6000003D4BC8}}, {«error» ⎨Cannot read property 'rwr' of undefined
⎬ &Message{port = "error", datum = 0x6000003C6908, from = 0x600002FDA148, cause = 0x6000003D4BC8}}]


(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(75:12) Too many arguments for 'zd.make_message', expected 3 arguments, got 4
	msg := zd.make_message("filename", p, main_container, nil )
	       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(77:14) Undeclared name: make_cause
	cause := make_cause (eh, causingMessage)
	         ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(84:14) Undeclared name: make_cause
	cause := make_cause (eh, causingMessage)
	         ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(92:14) Undeclared name: make_cause
	cause := make_cause (eh, causingMessage)
	         ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(93:47) Undeclared name: msg
	sendf("FORWARD 0x%p %s->%v", eh, eh.name, msg.port)
	                                          ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(225:25) Too many arguments for 'make_message', expected 3 arguments, got 4
	... ssage = make_message ("?", new_datum_bang (), container, cause) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(257:14) Too many arguments for 'make_message', expected 3 arguments, got 4
	tick_msg := make_message (".", new_datum_bang (), eh, cause)
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(612:56) No parameter named 'cause' for this procedure type
	zd.send_string (eh, "output", captured_output, cause=causingMsg)
	                                               ^~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(612:9) Parameter 'causingMessage' of type '^Message' is missing in procedure call
	zd.send_string (eh, "output", captured_output, cause=causingMsg)
	^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(613:36) No parameter named 'cause' for this procedure type
	zd.send_string (eh, "error", err, cause=causingMsg)
	                                  ^~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:12) Too many arguments for 'make_message', expected 3 arguments, got 4
	msg = make_message (".", new_datum_bang (), container, cause)
	      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/leaf0d/leaf0d.odin(613:2) Parameter 'causingMessage' of type '^Message' is missing in procedure call
	zd.send_string (eh, "error", err, cause=causingMsg)
	^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(75:43) 'make_cause' is not declared by 'zd'
	... me", p, zd.make_cause (main_container, nil) ) ...
	            ^~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(77:14) Undeclared name: make_cause
	cause := make_cause (eh, causingMessage)
	         ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(84:14) Undeclared name: make_cause
	cause := make_cause (eh, causingMessage)
	         ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(92:14) Undeclared name: make_cause
	cause := make_cause (eh, causingMessage)
	         ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(93:47) Undeclared name: msg
	sendf("FORWARD 0x%p %s->%v", eh, eh.name, msg.port)
	                                          ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(225:63) Undeclared name: make_cause
	... ang (), make_cause (container, causingMessage)) ...
	            ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(257:14) Too many arguments for 'make_message', expected 3 arguments, got 4
	tick_msg := make_message (".", new_datum_bang (), eh, cause)
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:50) Undeclared name: make_cause
	... ang (), make_cause (container, cause)) ...
	            ^~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:73) Undeclared name: cause
	... tainer, cause)) ...
	            ^~~~^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(75:43) Cannot assign value 'zd.make_cause(main_container, nil)' of type 'Cause' to '^Cause' in procedure argument
	... me", p, zd.make_cause (main_container, nil) ) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(79:38) Cannot assign value 'cause' of type 'Cause' to '^Cause' in procedure argument
	msg := make_message(port, datum, cause)
	                                 ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(85:51) 'cause' of type 'Cause' has no field 'port'
	sendf("SEND 0x%p %s [%v]", eh, eh.name, port, cause.port)
	                                              ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(87:38) Cannot assign value 'cause' of type 'Cause' to '^Cause' in procedure argument
	msg := make_message(port, datum, cause)
	                                 ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(76:21) Undeclared name: causingMessage
	cause.message = causingMessage
	                ^~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(77:12) Cannot assign value 'cause' of type '^Cause' to 'Cause' in return statement
	return cause
	       ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(93:47) Undeclared name: msg
	sendf("FORWARD 0x%p %s->%v", eh, eh.name, msg.port)
	                                          ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(257:14) Too many arguments for 'make_message', expected 3 arguments, got 4
	tick_msg := make_message (".", new_datum_bang (), eh, cause)
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(225:63) Cannot assign value 'make_cause(container, causingMessage)' of type 'Cause' to '^Cause' in procedure argument
	... ang (), make_cause (container, causingMessage)) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:43) Cannot assign value 'cause' of type 'Cause' to '^Cause' in procedure argument
	fmsg := make_message(port, msg.datum, cause)
	                                      ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:73) Undeclared name: cause
	... tainer, cause)) ...
	     
       ^~~
~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:50) Cannot assign value 'make_cause(container, cause)' of type 'Cause' to '^Cause' in procedure argument
	... ang (), make_cause (container, cause)) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~^

make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(75:43) Cannot assign value 'zd.make_cause(main_container, nil)' of type 'Cause' to '^Cause' in procedure argument
	... me", p, zd.make_cause (main_container, nil) ) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(79:38) Cannot assign value 'cause' of type 'Cause' to '^Cause' in procedure argument
	msg := make_message(port, datum, cause)
	                                 ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(85:51) 'cause' of type 'Cause' has no field 'port'
	sendf("SEND 0x%p %s [%v]", eh, eh.name, port, cause.port)
	                                              ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(87:38) Cannot assign value 'cause' of type 'Cause' to '^Cause' in procedure argument
	msg := make_message(port, datum, cause)
	                                 ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(93:47) Undeclared name: msg
	sendf("FORWARD 0x%p %s->%v", eh, eh.name, msg.port)
	                                          ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(76:21) Undeclared name: causingMessage
	cause.message = causingMessage
	                ^~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(257:14) Too many arguments for 'make_message', expected 3 arguments, got 4
	tick_msg := make_message (".", new_datum_bang (), eh, cause)
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(225:63) Cannot assign value 'make_cause(container, causingMessage)' of type 'Cause' to '^Cause' in procedure argument
	... ang (), make_cause (container, causingMessage)) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(77:12) Cannot assign value 'cause' of type '^Cause' to 'Cause' in return statement
	return cause
	       ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:73) Undeclared name: cause
	... tainer, cause)) ...
	            ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:43) Cannot assign value 'cause' of type 'Cause' to '^Cause' in procedure argument
	fmsg := make_message(port, msg.datum, cause)
	                                      ^~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:50) Cannot assign value 'make_cause(container, cause)' of type 'Cause' to '^Cause' in procedure argument
	... ang (), make_cause (container, cause)) ...
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~^

make: *** [dev] Error 1
(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(85:51) 'cause' of type '^Cause' has no field 'port'
	sendf("SEND 0x%p %s [%v]", eh, eh.name, port, cause.port)
	                                              ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(93:47) Undeclared name: msg
	sendf("FORWARD 0x%p %s->%v", eh, eh.name, msg.port)
	                                          ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(76:21) Undeclared name: causingMessage
	cause.message = causingMessage
	                ^~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(233:73) Undeclared name: cause
	... tainer, cause)) ...
	            ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(257:14) Too many arguments for 'make_message', expected 3 arguments, got 4
	tick_msg := make_message (".", new_datum_bang (), eh, cause)
	            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(257:82) Syntax Error: Expected a comma, got a newline
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(259:5) Syntax Error: Expected an operand
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(260:1) Syntax Error: Expected an operand
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(264:7) Syntax Error: Expected ')', got ':'
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(264:8) Syntax Error: Expected ';', got :
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(358:0) Syntax Error: Expected '}', got 'EOF'
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(76:21) Cannot assign value 'msg' of type '^Message' to 'Message' in assignment
	cause.message = msg
	                ^~^

make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(94:32) Undeclared name: msg
	fmsg := make_message(port, msg.datum, cause)
	                           ^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(76:21) Cannot assign value 'msg' of type '^Message' to 'Message' in assignment
	cause.message = msg
	                ^~^

make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/message.odin(76:21) Cannot assign value 'msg' of type '^Message' to 'Message' in assignment
	cause.message = msg
	                ^~^

make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF0BC8, cause = 0x600001AF1208}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF4388, cause = 0x600001AF1508}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF4A08, cause = 0x600001AF17C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F8188}} msg=&Message{port = "1", datum = 0x600000FF5088, cause = 0x600001AF1908}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F8428}} msg=&Message{port = "1", datum = 0x600000FF5208, cause = 0x600001AF47C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F06F8}} msg=&Message{port = "1", datum = 0x600000FF5408, cause = 0x600001AF4948}
?◦2 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 104574700, reclaim = nil, asString = proc(^Datum) -> string @ 104574E40}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FFDC48, cause = 0x600001AF8E28}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FFE148, cause = 0x600001AF9768}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014F53E8, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FFE8C8, cause = 0x600001AF98A8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FFEA48, cause = 0x600001AFA0E8}
?◦22 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 104574700, reclaim = nil, asString = proc(^Datum) -> string @ 104574E40}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014F57D8, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FFF448, cause = 0x600001AF99E8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FFF6C8, cause = 0x600001AFA608}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FE45C8, cause = 0x600001AF9268}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F6348}} msg=&Message{port = "1", datum = 0x600000FE4F88, cause = 0x600001AF93A8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FE5108, cause = 0x600001AFAF88}
?◦42 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 104574700, reclaim = nil, asString = proc(^Datum) -> string @ 104574E40}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014F5D48, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF1588, cause = 0x600001AF1A28}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF5B88, cause = 0x600001AFB7A8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF5E08, cause = 0x600001AF4DE8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F8C38}} msg=&Message{port = "1", datum = 0x600000FF5DC8, cause = 0x600001AF4DE8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F8DE8}} msg=&Message{port = "1", datum = 0x600000FE6348, cause = 0x600001AFB848}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014F6828, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FE69C8, cause = 0x600001AFB928}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F51D8}} msg=&Message{port = "1", datum = 0x600000FE6C48, cause = 0x600001AFBB88}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FD0148, cause = 0x600001AFBDC8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FD0648, cause = 0x600001AE8608}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014E8398, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FD0D48, cause = 0x600001AE8748}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FD0EC8, cause = 0x600001AE8F48}
?◦59 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 104574700, reclaim = nil, asString = proc(^Datum) -> string @ 104574E40}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014E8758, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FD1848, cause = 0x600001AE8888}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "1", datum = 0x600000FF1788, cause = 0x600001AF1D28}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF25C8, cause = 0x600001AEC008}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF2848, cause = 0x600001AF23E8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F1208}} msg=&Message{port = "1", datum = 0x600000FF2808, cause = 0x600001AF23E8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F13B8}} msg=&Message{port = "1", datum = 0x600000FF3208, cause = 0x600001AF27A8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF3788, cause = 0x600001AF2888}
deracer inst=&Deracer_Instance_Data{state = "waitingForSecond", buffer = TwoMessages{first = 0x6000014F0C38, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FE1248, cause = 0x600001AE83E8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF68C8, cause = 0x600001AF5068}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FF6B48, cause = 0x600001AF5468}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F9358}} msg=&Message{port = "1", datum = 0x600000FF6B08, cause = 0x600001AF5468}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F9508}} msg=&Message{port = "1", datum = 0x600000FD1A88, cause = 0x600001AE93E8}
deracer inst=&Deracer_Instance_Data{state = "idle", buffer = TwoMessages{first = <nil>, second = <nil>}} msg=&Message{port = "2", datum = 0x600000FD2108, cause = 0x600001AE94C8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014F1B98}} msg=&Message{port = "1", datum = 0x600000FF7C48, cause = 0x600001AF2008}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014E8FC8}} msg=&Message{port = "1", datum = 0x600000FF7DC8, cause = 0x600001AF5BA8}
deracer inst=&Deracer_Instance_Data{state = "waitingForFirst", buffer = TwoMessages{first = <nil>, second = 0x6000014E8188}} msg=&Message{port = "1", datum = 0x600000FF7FC8, cause = 0x600001AF5CC8}
?◦77 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 104574700, reclaim = nil, asString = proc(^Datum) -> string @ 104574E40}
--- Outputs ---
[{«error» ⎨
⎬ <- ⟨OhmJS◦8,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦28,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦48,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦65,input⟩}, {«output» ⎨
⎬ <- ⟨OhmJS◦83,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined
⎬ <- ⟨OhmJS◦83,input⟩}]


(base) $ 

(base) $ 

(base) $ 

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
?◦2 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10AA4AD60, reclaim = nil, asString = proc(^Datum) -> string @ 10AA4BF30}
?◦22 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10AA4AD60, reclaim = nil, asString = proc(^Datum) -> string @ 10AA4BF30}
?◦42 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10AA4AD60, reclaim = nil, asString = proc(^Datum) -> string @ 10AA4BF30}
?◦59 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10AA4AD60, reclaim = nil, asString = proc(^Datum) -> string @ 10AA4BF30}
?◦77 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10AA4AD60, reclaim = nil, asString = proc(^Datum) -> string @ 10AA4BF30}
--- Outputs ---
[{«error» ⎨
⎬ <- ⟨OhmJS◦8,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦28,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦48,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦65,input⟩}, {«output» ⎨
⎬ <- ⟨OhmJS◦83,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined
⎬ <- ⟨OhmJS◦83,input⟩}]


(base) $ pwd
pwd
/Users/tarvydas/quicklisp/local-projects/find-and-replace
(base) $ ls *.drawio
ls *.drawio
find-and-replace.drawio
(base) $ open find-and-replace.drawio 
open find-and-replace.drawio 
(base) $ open find-and-replace.drawio 
open find-and-replace.drawio 
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
--- Outputs ---
[{«error» ⎨
⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨
⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨
⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined
⎬ <- ⟨OhmJS◦76,input⟩}]


(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨
⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦76,input⟩}]


(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦76,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(3:20) Syntax Error: Expected ')', got ':'
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(3:23) Syntax Error: Expected ';', got identifier
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(5:5) Syntax Error: You cannot use a for statement in the file scope
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(3:31) Undeclared name: zd
	print_hierarchy :: proc (c : ^zd.Eh) {
	                              ^^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(65:28) Cannot assign value 'main_container' of type '^Eh' to '^invalid type' in procedure argument
	debug.print_hierarchy (main_container)
	                       ^~~~~~~~~~~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(4:5) Undeclared name: fmt
	fmt.printf ("(%s", c.name)
	^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(4:24) 'c' of type '^invalid type' has no field 'name'
	fmt.printf ("(%s", c.name)
	                   ^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(5:18) 'c' of type '^invalid type' has no field 'children'
	for child in c.children {
	             ^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(6:2) Undeclared name: fmt
	fmt.printf ("\n")
	^~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(7:19) Undeclared name: child
	print_hierarchy (child)
	                 ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(9:5) Undeclared name: fmt
	fmt.printf (")")
	^~^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(3:1) Syntax Error: Unknown library collection: 'code'
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(5:31) Undeclared name: zd
	print_hierarchy :: proc (c : ^zd.Eh) {
	                              ^^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(6:24) 'c' of type '^invalid type' has no field 'name'
	fmt.printf ("(%s", c.name)
	                   ^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(7:18) 'c' of type '^invalid type' has no field 'children'
	for child in c.children {
	             ^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(9:19) Undeclared name: child
	print_hierarchy (child)
	                 ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(65:28) Cannot assign value 'main_container' of type '^Eh' to '^invalid type' in procedure argument
	debug.print_hierarchy (main_container)
	                       ^~~~~~~~~~~~~^

make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(4:1) Syntax Error: Path does not exist: 0d
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(Transpiler
(All Before 4
(deracer◦56)
(deracer◦57)
(deracer◦58))
(OhmJS◦59)
(fakepipe
(deracer◦60)
(fakepipename◦61)
(syncfilewrite2◦62)
(deracer◦63)
(trash◦64))
(fakepipe
(deracer◦65)
(fakepipename◦66)
(syncfilewrite2◦67)
(deracer◦68)
(trash◦69)))
(rwr◦70)
(rwrohm◦71)
(rwrsemjs◦72)
(Transpiler
(All Before 4
(deracer◦73)
(deracer◦74)
(deracer◦75))
(OhmJS◦76)
(fakepipe
(deracer◦77)
(fakepipename◦78)
(syncfilewrite2◦79)
(deracer◦80)
(trash◦81))
(fakepipe
(deracer◦82)
(fakepipename◦83)
(syncfilewrite2◦84)
(deracer◦85)
(trash◦86))))
(find◦87))
(Decode
($rt/decode.js)))--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦76,input⟩}]

(base) $ make dev
*** output flushed ***
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(Transpiler
(All Before 4
(deracer◦56)
(deracer◦57)
(deracer◦58))
(OhmJS◦59)
(fakepipe
(deracer◦60)
(fakepipename◦61)
(syncfilewrite2◦62)
(deracer◦63)
(trash◦64))
(fakepipe
(deracer◦65)
(fakepipename◦66)
(syncfilewrite2◦67)
(deracer◦68)
(trash◦69)))
(rwr◦70)
(rwrohm◦71)
(rwrsemjs◦72)
(Transpiler
(All Before 4
(deracer◦73)
(deracer◦74)
(deracer◦75))
(OhmJS◦76)
(fakepipe
(deracer◦77)
(fakepipename◦78)
(syncfilewrite2◦79)
(deracer◦80)
(trash◦81))
(fakepipe
(deracer◦82)
(fakepipename◦83)
(syncfilewrite2◦84)
(deracer◦85)
(trash◦86))))
(find◦87))
(Decode
($rt/decode.js)))--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦76,input⟩}]

(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ 

 
(base) $ 
(base) $ 

(base) $ 

(base) $ 

(base) $ 

(base) $ make dev
*** output flushed ***
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(Transpiler
(All Before 4
(deracer◦56)
(deracer◦57)
(deracer◦58))
(OhmJS◦59)
(fakepipe
(deracer◦60)
(fakepipename◦61)
(syncfilewrite2◦62)
(deracer◦63)
(trash◦64))
(fakepipe
(deracer◦65)
(fakepipename◦66)
(syncfilewrite2◦67)
(deracer◦68)
(trash◦69)))
(rwr◦70)
(rwrohm◦71)
(rwrsemjs◦72)
(Transpiler
(All Before 4
(deracer◦73)
(deracer◦74)
(deracer◦75))
(OhmJS◦76)
(fakepipe
(deracer◦77)
(fakepipename◦78)
(syncfilewrite2◦79)
(deracer◦80)
(trash◦81))
(fakepipe
(deracer◦82)
(fakepipename◦83)
(syncfilewrite2◦84)
(deracer◦85)
(trash◦86))))
(find◦87))
(Decode
($rt/decode.js)))

--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦76,input⟩}]

(base) $ m4 fr/find.rwr
m4 fr/find.rwr
Find {
  FindSCN [Heading Rule+ AuxRule*] = ‛«Heading»«Rule»«AuxRule»’

  Heading [koctothorpe+ kblank Name] = ‛«koctothorpe»«kblank»«Name»’

  Rule [RuleName RuleBody] = ‛«RuleName»«RuleBody»’
  AuxRule [kdash RuleName RuleBody] = ‛«kdash»«RuleName»«RuleBody»’

  RuleBody [RuleBranch+] = ‛«RuleBranch»’

  Branch_tagged [kdash Tag MatchItems+] = ‛«kdash»«Tag»«MatchItems»’
  Branch_untagged [MatchItems+] = ‛«MatchItems»’

  RuleName [lt kmark gt Name lts kmark2 gt2] = ‛«lt»«kmark»«gt»«Name»«lts»«mark2»«gt2»’

  // MatchItem - covered by OhmJS

  RuleApplication [lt ksub gt lt ki gt Name lts ki gt  lts ksub gt] = ‛«lt»«ksub»«gt»«lt»«ki»«gt»«Name»«lts»«ki»«gt»«lts»«ksub»«gt»’
  Recursion [krec] = ‛«krec»’
  NegativeMatch [lt kspan kstyle keq red gt item lt ksup gt kne lts ksup gt lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«red»«gt»«item»«lt»«ksup»«gt»«kne»«lts»«ksup»«gt»«lts»«kspan»«gt»’
  // Iteration [OneOrMore | ZeroOrMore | Optional
  OneOrMore [Vinculum lt ksub gt k1 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k1»«lts»«ksub»«gt»’
  ZeroOrMore [Vinculum lt ksub gt k0 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k0»«lts»«ksub»«gt»’
  Optional [Vinculum lt ksub gt kq lts ksub gt] = ‛«inculum»«lt»«ksub»«gt»«kq»«lts»«ksub»«gt»’
  Vinculum [lt ku gt MatchItem+ lts ku gt] = ‛«lt»«ku»«gt»«MatchItem»«lts»«ku»«gt»’
  Any [lt kspan kstyle keq green gt kcheckmark lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«green»«gt»«kcheckmark»«lts»«kspan»«gt»’

  // character
  Tag [koctothorpe Name] = ‛«koctothorpe»«Name»’
  word [lb s rb] = ‛«lb»«s»«rb»’
  string [dq1 s dq2] = ‛«dq1»«s»«dq2»’
  Name [lb cs+ rb] = ‛«lb»«cs»«rb»’
  NameChar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’
  // NameChar_other
  // Line
  // space
  // dq
}
(base) $ 

(base) $ 

 
(base) $ 
 
(base) $ 
 
(base) $ 
 
(base) $ 
 
(base) $ 
 
(base) $ 
(base) $ 

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
($m4 fr/find.rwr)
(find◦88))
(Decode
($rt/decode.js)))?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 100492EB0, reclaim = nil, asString = proc(^Datum) -> string @ 100493260}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10D8EF770, reclaim = nil, asString = proc(^Datum) -> string @ 10D8F0270}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(211:19) 'Log_Level' is not declared by 'runtime'
	... gf(cast(runtime.Log_Level)log_handlers,   fmt_str, ..args, locat ...
	            ^~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(215:16) 'Log_Level' is not declared by 'runtime'
	... gf(cast(runtime.Log_Level)log_all,   fmt_str, ..args, location=l ...
	            ^~~~~~~~~~~~~~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/0d/0d.odin(219:16) 'Log_Level' is not declared by 'runtime'
	... gf(cast(runtime.Log_Level)log_all,   fmt_str, ..args, location=l ...
	            ^~~~~~~~~~~~~~~~^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** 0

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))[DEBUG] --- [12:34:57] HANDLE  0x600003EE3E28 main/Read Text File(input)
[DEBUG] --- [12:34:57] HANDLE  0x600003EEC008 Read Text File/Ensure String Datum◦55(operand)
[DEBUG] --- [12:34:57] FORWARD 0x600003EEC008 Ensure String Datum◦55->output
[DEBUG] --- [12:34:57] OUTPUT 0x600003EEC008 Read Text File/Ensure String Datum◦55(output)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE3F08 Read Text File/Low Level Read Text File◦54(input)
[DEBUG] --- [12:34:57] SEND 0x600003EE3F08 Low Level Read Text File◦54 [str]%!(EXTRA &Eh{name = "Low Level Read Text File\u25e654", input = Queue($T=^Message){data = [0x6000009EC728, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C08F0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE3F08 Read Text File/Low Level Read Text File◦54(str)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE3E28 main/Read Text File(str)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE00E8 main/Front End(input)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE01C8 Front End/Delineate Words(input)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE02A8 Delineate Words/word◦1(go)
[DEBUG] --- [12:34:57] SEND 0x600003EE02A8 word◦1 [output]%!(EXTRA &Eh{name = "word\u25e61", input = Queue($T=^Message){data = [0x6000009F0068, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C7BD0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE02A8 Delineate Words/word◦1(output)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0388 Delineate Words/Transpiler(input)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0468 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0628 All Before 4/deracer◦3(2)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE1348 Delineate Words/wordjs◦16(go)
[DEBUG] --- [12:34:57] SEND 0x600003EE1348 wordjs◦16 [output]%!(EXTRA &Eh{name = "wordjs\u25e616", input = Queue($T=^Message){data = [0x6000009F0098, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C7CD0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE1348 Delineate Words/wordjs◦16(output)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE1428 Delineate Words/word◦17(go)
[DEBUG] --- [12:34:57] SEND 0x600003EE1428 word◦17 [output]%!(EXTRA &Eh{name = "word\u25e617", input = Queue($T=^Message){data = [0x6000009F00C8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C7A70, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE1428 Delineate Words/word◦17(output)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0388 Delineate Words/Transpiler(grammarfn)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0468 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0548 All Before 4/deracer◦2(2)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0388 Delineate Words/Transpiler(semanticsfn)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0468 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0708 All Before 4/deracer◦4(2)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0388 Delineate Words/Transpiler(grammar name)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0468 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0548 All Before 4/deracer◦2(1)
[DEBUG] --- [12:34:57] FORWARD 0x600003EE0548 deracer◦2->1
[DEBUG] --- [12:34:57] FORWARD 0x600003EE0548 deracer◦2->2
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0548 All Before 4/deracer◦2(1)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0548 All Before 4/deracer◦2(2)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0708 All Before 4/deracer◦4(1)
[DEBUG] --- [12:34:57] FORWARD 0x600003EE0708 deracer◦4->1
[DEBUG] --- [12:34:57] FORWARD 0x600003EE0708 deracer◦4->2
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0708 All Before 4/deracer◦4(1)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0708 All Before 4/deracer◦4(2)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE0628 All Before 4/deracer◦3(1)
[DEBUG] --- [12:34:57] FORWARD 0x600003EE0628 deracer◦3->1
[DEBUG] --- [12:34:57] FORWARD 0x600003EE0628 deracer◦3->2
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0628 All Before 4/deracer◦3(1)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0628 All Before 4/deracer◦3(2)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0468 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0468 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0468 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:57] OUTPUT 0x600003EE0468 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE07E8 Transpiler/OhmJS◦5(grammar name)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE07E8 Transpiler/OhmJS◦5(grammar)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE07E8 Transpiler/OhmJS◦5(semantics)
[DEBUG] --- [12:34:57] HANDLE  0x600003EE07E8 Transpiler/OhmJS◦5(input)
[DEBUG] --- [12:34:58] SEND 0x600003EE07E8 OhmJS◦5 [output]%!(EXTRA &Eh{name = "OhmJS\u25e65", input = Queue($T=^Message){data = [0x6000009E0068, 0x6000009E0098, 0x6000009E00C8, 0x6000009E00F8, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] SEND 0x600003EE07E8 OhmJS◦5 [error]%!(EXTRA &Eh{name = "OhmJS\u25e65", input = Queue($T=^Message){data = [0x6000009E0068, 0x6000009E0098, 0x6000009E00C8, 0x6000009E00F8, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [0x6000009E0398, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 1, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE07E8 Transpiler/OhmJS◦5(output)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE07E8 Transpiler/OhmJS◦5(error)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE0388 Delineate Words/Transpiler(output)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE0388 Delineate Words/Transpiler(error)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE01C8 Front End/Delineate Words(output)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE01C8 Front End/Delineate Words(error)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1508 Front End/Escape Whitespace(input)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE15E8 Escape Whitespace/escapesohm◦18(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE15E8 escapesohm◦18 [output]%!(EXTRA &Eh{name = "escapesohm\u25e618", input = Queue($T=^Message){data = [0x6000009E87E8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9680, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE15E8 Escape Whitespace/escapesohm◦18(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE16C8 Escape Whitespace/escapes◦19(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE16C8 escapes◦19 [output]%!(EXTRA &Eh{name = "escapes\u25e619", input = Queue($T=^Message){data = [0x6000009E42D8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9580, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE16C8 Escape Whitespace/escapes◦19(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE17A8 Escape Whitespace/escapesrwr◦20(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE17A8 escapesrwr◦20 [output]%!(EXTRA &Eh{name = "escapesrwr\u25e620", input = Queue($T=^Message){data = [0x6000009E8818, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9780, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE17A8 Escape Whitespace/escapesrwr◦20(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1888 Escape Whitespace/Rewriter(input)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2928 Rewriter/rwr◦35(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE2928 rwr◦35 [output]%!(EXTRA &Eh{name = "rwr\u25e635", input = Queue($T=^Message){data = [0x6000009F07B8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C8DA0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2928 Rewriter/rwr◦35(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2A08 Rewriter/rwrohm◦36(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE2A08 rwrohm◦36 [output]%!(EXTRA &Eh{name = "rwrohm\u25e636", input = Queue($T=^Message){data = [0x6000009F0788, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9380, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2A08 Rewriter/rwrohm◦36(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2AE8 Rewriter/rwrsemjs◦37(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE2AE8 rwrsemjs◦37 [output]%!(EXTRA &Eh{name = "rwrsemjs\u25e637", input = Queue($T=^Message){data = [0x6000009F0758, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9480, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2AE8 Rewriter/rwrsemjs◦37(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2E68 Rewriter/Transpiler(input)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2F48 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE3108 All Before 4/deracer◦41(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1968 Rewriter/Transpiler(grammar name)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1A48 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1B28 All Before 4/deracer◦21(1)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1968 Rewriter/Transpiler(grammarfn)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1A48 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1B28 All Before 4/deracer◦21(2)
[DEBUG] --- [12:34:58] FORWARD 0x600003EE1B28 deracer◦21->1
[DEBUG] --- [12:34:58] FORWARD 0x600003EE1B28 deracer◦21->2
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1B28 All Before 4/deracer◦21(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1B28 All Before 4/deracer◦21(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1CE8 All Before 4/deracer◦23(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1A48 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1DC8 Transpiler/OhmJS◦24(grammar name)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1968 Rewriter/Transpiler(semanticsfn)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1A48 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1CE8 All Before 4/deracer◦23(2)
[DEBUG] --- [12:34:58] FORWARD 0x600003EE1CE8 deracer◦23->1
[DEBUG] --- [12:34:58] FORWARD 0x600003EE1CE8 deracer◦23->2
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1CE8 All Before 4/deracer◦23(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1CE8 All Before 4/deracer◦23(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1C08 All Before 4/deracer◦22(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1A48 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1DC8 Transpiler/OhmJS◦24(grammar)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1888 Escape Whitespace/Rewriter(ohmfn)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2E68 Rewriter/Transpiler(grammarfn)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2F48 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE3028 All Before 4/deracer◦40(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1888 Escape Whitespace/Rewriter(grammar name)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2E68 Rewriter/Transpiler(grammar name)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2F48 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE3028 All Before 4/deracer◦40(1)
[DEBUG] --- [12:34:58] FORWARD 0x600003EE3028 deracer◦40->1
[DEBUG] --- [12:34:58] FORWARD 0x600003EE3028 deracer◦40->2
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE3028 All Before 4/deracer◦40(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE3028 All Before 4/deracer◦40(2)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE31E8 All Before 4/deracer◦42(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2F48 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE32C8 Transpiler/OhmJS◦43(grammar name)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1888 Escape Whitespace/Rewriter(rwrfn)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2BC8 Rewriter/Read Text File(input)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2D88 Read Text File/Ensure String Datum◦39(operand)
[DEBUG] --- [12:34:58] FORWARD 0x600003EE2D88 Ensure String Datum◦39->output
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2D88 Read Text File/Ensure String Datum◦39(output)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2CA8 Read Text File/Low Level Read Text File◦38(input)
[DEBUG] --- [12:34:58] SEND 0x600003EE2CA8 Low Level Read Text File◦38 [str]%!(EXTRA &Eh{name = "Low Level Read Text File\u25e638", input = Queue($T=^Message){data = [0x6000009E4DB8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C08F0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2CA8 Read Text File/Low Level Read Text File◦38(str)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE2BC8 Rewriter/Read Text File(str)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1968 Rewriter/Transpiler(input)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1A48 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1C08 All Before 4/deracer◦22(2)
[DEBUG] --- [12:34:58] FORWARD 0x600003EE1C08 deracer◦22->1
[DEBUG] --- [12:34:58] FORWARD 0x600003EE1C08 deracer◦22->2
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1C08 All Before 4/deracer◦22(1)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1C08 All Before 4/deracer◦22(2)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1A48 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1A48 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1DC8 Transpiler/OhmJS◦24(semantics)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE1DC8 Transpiler/OhmJS◦24(input)
[DEBUG] --- [12:34:58] SEND 0x600003EE1DC8 OhmJS◦24 [output]%!(EXTRA &Eh{name = "OhmJS\u25e624", input = Queue($T=^Message){data = [0x6000009E4A58, 0x6000009E0608, 0x6000009F0B48, 0x6000009F0B78, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] SEND 0x600003EE1DC8 OhmJS◦24 [error]%!(EXTRA &Eh{name = "OhmJS\u25e624", input = Queue($T=^Message){data = [0x6000009E4A58, 0x6000009E0608, 0x6000009F0B48, 0x6000009F0B78, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [0x6000009E4E18, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 1, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1DC8 Transpiler/OhmJS◦24(output)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1DC8 Transpiler/OhmJS◦24(error)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1968 Rewriter/Transpiler(output)
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE1968 Rewriter/Transpiler(error)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE2E68 Rewriter/Transpiler(semantics)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE38E8 Transpiler/fakepipe(input)
[DEBUG] --- [12:34:58] HANDLE  0x600003EE3AA8 fakepipe/fakepipename◦50(go)
[DEBUG] --- [12:34:58] SEND 0x600003EE3AA8 fakepipename◦50 [output]%!(EXTRA &Eh{name = "fakepipename\u25e650", input = Queue($T=^Message){data = [0x6000009E51A8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9DF0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:58] OUTPUT 0x600003EE3AA8 fakepipe/fakepipename◦50(output)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE3C68 fakepipe/deracer◦52(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE39C8 fakepipe/deracer◦49(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE3C68 fakepipe/deracer◦52(1)
[DEBUG] --- [12:34:59] FORWARD 0x600003EE3C68 deracer◦52->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EE3C68 deracer◦52->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE3C68 fakepipe/deracer◦52(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE3C68 fakepipe/deracer◦52(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE3B88 fakepipe/syncfilewrite2◦51(filename)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE3B88 fakepipe/syncfilewrite2◦51(input)
[DEBUG] --- [12:34:59] SEND 0x600003EE3B88 syncfilewrite2◦51(&%!s(^Cause=0x6000007E6788))[%!(MISSING ARGUMENT)]
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE3B88 fakepipe/syncfilewrite2◦51(done)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE39C8 fakepipe/deracer◦49(1)
[DEBUG] --- [12:34:59] FORWARD 0x600003EE39C8 deracer◦49->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EE39C8 deracer◦49->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE39C8 fakepipe/deracer◦49(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE39C8 fakepipe/deracer◦49(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE3D48 fakepipe/trash◦53(input)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE38E8 Transpiler/fakepipe(filename)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE2F48 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE31E8 All Before 4/deracer◦42(2)
[DEBUG] --- [12:34:59] FORWARD 0x600003EE31E8 deracer◦42->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EE31E8 deracer◦42->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE31E8 All Before 4/deracer◦42(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE31E8 All Before 4/deracer◦42(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE3108 All Before 4/deracer◦41(1)
[DEBUG] --- [12:34:59] FORWARD 0x600003EE3108 deracer◦41->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EE3108 deracer◦41->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE3108 All Before 4/deracer◦41(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE3108 All Before 4/deracer◦41(2)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE2F48 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE2F48 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE2F48 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE32C8 Transpiler/OhmJS◦43(grammar)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE32C8 Transpiler/OhmJS◦43(semantics)
[DEBUG] --- [12:34:59] HANDLE  0x600003EE32C8 Transpiler/OhmJS◦43(input)
[DEBUG] --- [12:34:59] SEND 0x600003EE32C8 OhmJS◦43 [output]%!(EXTRA &Eh{name = "OhmJS\u25e643", input = Queue($T=^Message){data = [0x6000009EC908, 0x6000009FC278, 0x6000009FC2A8, 0x6000009FC308, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] SEND 0x600003EE32C8 OhmJS◦43 [error]%!(EXTRA &Eh{name = "OhmJS\u25e643", input = Queue($T=^Message){data = [0x6000009EC908, 0x6000009FC278, 0x6000009FC2A8, 0x6000009FC308, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [0x6000009E0E48, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 1, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE32C8 Transpiler/OhmJS◦43(output)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE32C8 Transpiler/OhmJS◦43(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE2E68 Rewriter/Transpiler(output)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE2E68 Rewriter/Transpiler(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE1888 Escape Whitespace/Rewriter(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE1888 Escape Whitespace/Rewriter(output)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE1888 Escape Whitespace/Rewriter(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE1508 Front End/Escape Whitespace(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE1508 Front End/Escape Whitespace(output)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE1508 Front End/Escape Whitespace(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE00E8 main/Front End(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE00E8 main/Front End(error)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE00E8 main/Front End(output)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EE00E8 main/Front End(error)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC0E8 main/Back End(input)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC1C8 Back End/$m4 fr/find.ohm(stdin)
[DEBUG] --- [12:34:59] SEND 0x600003EEC1C8 $m4 fr/find.ohm [stdout]%!(EXTRA &Eh{name = "$m4 fr/find.ohm", input = Queue($T=^Message){data = [0x6000009FC5D8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006BCE30, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC1C8 Back End/$m4 fr/find.ohm(stdout)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC2A8 Back End/$m4 fr/find.rwr(stdin)
[DEBUG] --- [12:34:59] SEND 0x600003EEC2A8 $m4 fr/find.rwr [stdout]%!(EXTRA &Eh{name = "$m4 fr/find.rwr", input = Queue($T=^Message){data = [0x6000009FC608, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006BCE30, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC2A8 Back End/$m4 fr/find.rwr(stdout)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC468 Back End/iRewriter(input)
[DEBUG] --- [12:34:59] HANDLE  0x600003EED508 iRewriter/rwr◦71(go)
[DEBUG] --- [12:34:59] SEND 0x600003EED508 rwr◦71 [output]%!(EXTRA &Eh{name = "rwr\u25e671", input = Queue($T=^Message){data = [0x6000009E1088, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C8DA0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EED508 iRewriter/rwr◦71(output)
[DEBUG] --- [12:34:59] HANDLE  0x600003EED5E8 iRewriter/rwrohm◦72(go)
[DEBUG] --- [12:34:59] SEND 0x600003EED5E8 rwrohm◦72 [output]%!(EXTRA &Eh{name = "rwrohm\u25e672", input = Queue($T=^Message){data = [0x6000009E1058, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9380, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EED5E8 iRewriter/rwrohm◦72(output)
[DEBUG] --- [12:34:59] HANDLE  0x600003EED6C8 iRewriter/rwrsemjs◦73(go)
[DEBUG] --- [12:34:59] SEND 0x600003EED6C8 rwrsemjs◦73 [output]%!(EXTRA &Eh{name = "rwrsemjs\u25e673", input = Queue($T=^Message){data = [0x6000009E1028, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9480, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EED6C8 iRewriter/rwrsemjs◦73(output)
[DEBUG] --- [12:34:59] HANDLE  0x600003EED7A8 iRewriter/Transpiler(input)
[DEBUG] --- [12:34:59] HANDLE  0x600003EED888 Transpiler/All Before 4(4)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDA48 All Before 4/deracer◦75(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC548 iRewriter/Transpiler(grammar name)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC628 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC708 All Before 4/deracer◦57(1)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC548 iRewriter/Transpiler(grammarfn)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC628 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC708 All Before 4/deracer◦57(2)
[DEBUG] --- [12:34:59] FORWARD 0x600003EEC708 deracer◦57->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EEC708 deracer◦57->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC708 All Before 4/deracer◦57(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC708 All Before 4/deracer◦57(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC8C8 All Before 4/deracer◦59(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC628 Transpiler/All Before 4(1)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC9A8 Transpiler/OhmJS◦60(grammar name)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC548 iRewriter/Transpiler(semanticsfn)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC628 Transpiler/All Before 4(3)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC8C8 All Before 4/deracer◦59(2)
[DEBUG] --- [12:34:59] FORWARD 0x600003EEC8C8 deracer◦59->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EEC8C8 deracer◦59->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC8C8 All Before 4/deracer◦59(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC8C8 All Before 4/deracer◦59(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC7E8 All Before 4/deracer◦58(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEC628 Transpiler/All Before 4(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC9A8 Transpiler/OhmJS◦60(grammar)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEE768 Back End/find◦88(go)
[DEBUG] --- [12:34:59] SEND 0x600003EEE768 find◦88 [output]%!(EXTRA &Eh{name = "find\u25e688", input = Queue($T=^Message){data = [0x6000009FC638, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006CA0B0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEE768 Back End/find◦88(output)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEC468 Back End/iRewriter(ohm)
[DEBUG] --- [12:34:59] HANDLE  0x600003EED7A8 iRewriter/Transpiler(grammar)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDCE8 Transpiler/fakepipe(input)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDEA8 fakepipe/fakepipename◦79(go)
[DEBUG] --- [12:34:59] SEND 0x600003EEDEA8 fakepipename◦79 [output]%!(EXTRA &Eh{name = "fakepipename\u25e679", input = Queue($T=^Message){data = [0x6000009E1418, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9DF0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEDEA8 fakepipe/fakepipename◦79(output)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEE068 fakepipe/deracer◦81(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDDC8 fakepipe/deracer◦78(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEE068 fakepipe/deracer◦81(1)
[DEBUG] --- [12:34:59] FORWARD 0x600003EEE068 deracer◦81->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EEE068 deracer◦81->2
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEE068 fakepipe/deracer◦81(1)
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEE068 fakepipe/deracer◦81(2)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDF88 fakepipe/syncfilewrite2◦80(filename)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDF88 fakepipe/syncfilewrite2◦80(input)
[DEBUG] --- [12:34:59] SEND 0x600003EEDF88 syncfilewrite2◦80(&%!s(^Cause=0x6000007ED5C8))[%!(MISSING ARGUMENT)]
[DEBUG] --- [12:34:59] OUTPUT 0x600003EEDF88 fakepipe/syncfilewrite2◦80(done)
[DEBUG] --- [12:34:59] HANDLE  0x600003EEDDC8 fakepipe/deracer◦78(1)
[DEBUG] --- [12:34:59] FORWARD 0x600003EEDDC8 deracer◦78->1
[DEBUG] --- [12:34:59] FORWARD 0x600003EEDDC8 deracer◦78->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDDC8 fakepipe/deracer◦78(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDDC8 fakepipe/deracer◦78(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE148 fakepipe/trash◦82(input)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDCE8 Transpiler/fakepipe(filename)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED888 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED968 All Before 4/deracer◦74(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC468 Back End/iRewriter(rwr)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC548 iRewriter/Transpiler(input)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC628 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC7E8 All Before 4/deracer◦58(2)
[DEBUG] --- [12:35:00] FORWARD 0x600003EEC7E8 deracer◦58->1
[DEBUG] --- [12:35:00] FORWARD 0x600003EEC7E8 deracer◦58->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC7E8 All Before 4/deracer◦58(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC7E8 All Before 4/deracer◦58(2)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC628 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC628 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC9A8 Transpiler/OhmJS◦60(semantics)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC9A8 Transpiler/OhmJS◦60(input)
[DEBUG] --- [12:35:00] SEND 0x600003EEC9A8 OhmJS◦60 [output]%!(EXTRA &Eh{name = "OhmJS\u25e660", input = Queue($T=^Message){data = [0x6000009F10B8, 0x6000009F14D8, 0x6000009E1AA8, 0x6000009E1AD8, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:35:00] SEND 0x600003EEC9A8 OhmJS◦60 [error]%!(EXTRA &Eh{name = "OhmJS\u25e660", input = Queue($T=^Message){data = [0x6000009F10B8, 0x6000009F14D8, 0x6000009E1AA8, 0x6000009E1AD8, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [0x6000009F16B8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 1, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC9A8 Transpiler/OhmJS◦60(output)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC9A8 Transpiler/OhmJS◦60(error)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC548 iRewriter/Transpiler(output)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC548 iRewriter/Transpiler(error)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED7A8 iRewriter/Transpiler(semantics)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE228 Transpiler/fakepipe(input)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE3E8 fakepipe/fakepipename◦84(go)
[DEBUG] --- [12:35:00] SEND 0x600003EEE3E8 fakepipename◦84 [output]%!(EXTRA &Eh{name = "fakepipename\u25e684", input = Queue($T=^Message){data = [0x6000009E5CB8, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 1}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C9DF0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE3E8 fakepipe/fakepipename◦84(output)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE5A8 fakepipe/deracer◦86(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE308 fakepipe/deracer◦83(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE5A8 fakepipe/deracer◦86(1)
[DEBUG] --- [12:35:00] FORWARD 0x600003EEE5A8 deracer◦86->1
[DEBUG] --- [12:35:00] FORWARD 0x600003EEE5A8 deracer◦86->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE5A8 fakepipe/deracer◦86(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE5A8 fakepipe/deracer◦86(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE4C8 fakepipe/syncfilewrite2◦85(filename)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE4C8 fakepipe/syncfilewrite2◦85(input)
[DEBUG] --- [12:35:00] SEND 0x600003EEE4C8 syncfilewrite2◦85(&%!s(^Cause=0x6000007E71C8))[%!(MISSING ARGUMENT)]
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE4C8 fakepipe/syncfilewrite2◦85(done)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE308 fakepipe/deracer◦83(1)
[DEBUG] --- [12:35:00] FORWARD 0x600003EEE308 deracer◦83->1
[DEBUG] --- [12:35:00] FORWARD 0x600003EEE308 deracer◦83->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE308 fakepipe/deracer◦83(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE308 fakepipe/deracer◦83(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEE688 fakepipe/trash◦87(input)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEE228 Transpiler/fakepipe(filename)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED888 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDB28 All Before 4/deracer◦76(2)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC468 Back End/iRewriter(error)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEC468 Back End/iRewriter(grammar name)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED7A8 iRewriter/Transpiler(grammar name)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED888 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:00] HANDLE  0x600003EED968 All Before 4/deracer◦74(1)
[DEBUG] --- [12:35:00] FORWARD 0x600003EED968 deracer◦74->1
[DEBUG] --- [12:35:00] FORWARD 0x600003EED968 deracer◦74->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED968 All Before 4/deracer◦74(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED968 All Before 4/deracer◦74(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDB28 All Before 4/deracer◦76(1)
[DEBUG] --- [12:35:00] FORWARD 0x600003EEDB28 deracer◦76->1
[DEBUG] --- [12:35:00] FORWARD 0x600003EEDB28 deracer◦76->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDB28 All Before 4/deracer◦76(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDB28 All Before 4/deracer◦76(2)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDA48 All Before 4/deracer◦75(1)
[DEBUG] --- [12:35:00] FORWARD 0x600003EEDA48 deracer◦75->1
[DEBUG] --- [12:35:00] FORWARD 0x600003EEDA48 deracer◦75->2
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDA48 All Before 4/deracer◦75(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDA48 All Before 4/deracer◦75(2)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED888 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED888 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED888 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED888 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDC08 Transpiler/OhmJS◦77(grammar name)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDC08 Transpiler/OhmJS◦77(grammar)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDC08 Transpiler/OhmJS◦77(semantics)
[DEBUG] --- [12:35:00] HANDLE  0x600003EEDC08 Transpiler/OhmJS◦77(input)
[DEBUG] --- [12:35:00] SEND 0x600003EEDC08 OhmJS◦77 [output]%!(EXTRA &Eh{name = "OhmJS\u25e677", input = Queue($T=^Message){data = [0x6000009F80C8, 0x6000009F80F8, 0x6000009F8158, 0x6000009F81B8, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [], len = 0, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:35:00] SEND 0x600003EEDC08 OhmJS◦77 [error]%!(EXTRA &Eh{name = "OhmJS\u25e677", input = Queue($T=^Message){data = [0x6000009F80C8, 0x6000009F80F8, 0x6000009F8158, 0x6000009F81B8, <nil>, <nil>, <nil>, <nil>], len = 0, offset = 4}, output = Queue($T=^Message){data = [0x6000009F1718, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>, <nil>], len = 1, offset = 0}, owner = <nil>, children = [], connections = [], handler = proc(^Eh, ^Message) @ 1006C83E0, instance_data = any{}, state = "idle", kind = "leaf"})
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDC08 Transpiler/OhmJS◦77(output)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEDC08 Transpiler/OhmJS◦77(error)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED7A8 iRewriter/Transpiler(output)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EED7A8 iRewriter/Transpiler(error)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC468 Back End/iRewriter(output)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC468 Back End/iRewriter(error)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC0E8 main/Back End(error)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC0E8 main/Back End(output)
[DEBUG] --- [12:35:00] OUTPUT 0x600003EEC0E8 main/Back End(error)


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** 5

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))[DEBUG] --- [12:35:24] HANDLE  0x6000039E1508 main/Read Text File(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E16C8 Read Text File/Ensure String Datum◦55(operand)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E15E8 Read Text File/Low Level Read Text File◦54(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E40E8 main/Front End(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E41C8 Front End/Delineate Words(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E42A8 Delineate Words/word◦1(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4388 Delineate Words/Transpiler(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4468 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4628 All Before 4/deracer◦3(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5348 Delineate Words/wordjs◦16(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5428 Delineate Words/word◦17(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4388 Delineate Words/Transpiler(grammarfn)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4468 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4548 All Before 4/deracer◦2(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4388 Delineate Words/Transpiler(semanticsfn)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4468 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4708 All Before 4/deracer◦4(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4388 Delineate Words/Transpiler(grammar name)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4468 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4548 All Before 4/deracer◦2(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4708 All Before 4/deracer◦4(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E4628 All Before 4/deracer◦3(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E47E8 Transpiler/OhmJS◦5(grammar name)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E47E8 Transpiler/OhmJS◦5(grammar)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E47E8 Transpiler/OhmJS◦5(semantics)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E47E8 Transpiler/OhmJS◦5(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5508 Front End/Escape Whitespace(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E55E8 Escape Whitespace/escapesohm◦18(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E56C8 Escape Whitespace/escapes◦19(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E57A8 Escape Whitespace/escapesrwr◦20(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5888 Escape Whitespace/Rewriter(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E0008 Rewriter/rwr◦35(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E00E8 Rewriter/rwrohm◦36(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E01C8 Rewriter/rwrsemjs◦37(go)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E0548 Rewriter/Transpiler(input)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E0628 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E07E8 All Before 4/deracer◦41(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5968 Rewriter/Transpiler(grammar name)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5A48 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5B28 All Before 4/deracer◦21(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5968 Rewriter/Transpiler(grammarfn)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5A48 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5B28 All Before 4/deracer◦21(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5CE8 All Before 4/deracer◦23(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5DC8 Transpiler/OhmJS◦24(grammar name)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5968 Rewriter/Transpiler(semanticsfn)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5A48 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5CE8 All Before 4/deracer◦23(2)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5C08 All Before 4/deracer◦22(1)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5DC8 Transpiler/OhmJS◦24(grammar)
[DEBUG] --- [12:35:24] HANDLE  0x6000039E5888 Escape Whitespace/Rewriter(ohmfn)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0548 Rewriter/Transpiler(grammarfn)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0628 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0708 All Before 4/deracer◦40(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5888 Escape Whitespace/Rewriter(grammar name)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0548 Rewriter/Transpiler(grammar name)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0628 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0708 All Before 4/deracer◦40(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E08C8 All Before 4/deracer◦42(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E09A8 Transpiler/OhmJS◦43(grammar name)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5888 Escape Whitespace/Rewriter(rwrfn)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E02A8 Rewriter/Read Text File(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0468 Read Text File/Ensure String Datum◦39(operand)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0388 Read Text File/Low Level Read Text File◦38(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5968 Rewriter/Transpiler(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5A48 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5C08 All Before 4/deracer◦22(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5DC8 Transpiler/OhmJS◦24(semantics)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E5DC8 Transpiler/OhmJS◦24(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0548 Rewriter/Transpiler(semantics)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0FC8 Transpiler/fakepipe(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1188 fakepipe/fakepipename◦50(go)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1348 fakepipe/deracer◦52(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E10A8 fakepipe/deracer◦49(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1348 fakepipe/deracer◦52(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1268 fakepipe/syncfilewrite2◦51(filename)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1268 fakepipe/syncfilewrite2◦51(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E10A8 fakepipe/deracer◦49(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1428 fakepipe/trash◦53(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E0628 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E08C8 All Before 4/deracer◦42(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E07E8 All Before 4/deracer◦41(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E09A8 Transpiler/OhmJS◦43(grammar)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E09A8 Transpiler/OhmJS◦43(semantics)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E09A8 Transpiler/OhmJS◦43(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E17A8 main/Back End(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1888 Back End/$m4 fr/find.ohm(stdin)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1968 Back End/$m4 fr/find.rwr(stdin)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1B28 Back End/iRewriter(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2BC8 iRewriter/rwr◦71(go)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2CA8 iRewriter/rwrohm◦72(go)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2D88 iRewriter/rwrsemjs◦73(go)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2E68 iRewriter/Transpiler(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2F48 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3108 All Before 4/deracer◦75(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1C08 iRewriter/Transpiler(grammar name)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1CE8 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1DC8 All Before 4/deracer◦57(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1C08 iRewriter/Transpiler(grammarfn)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1CE8 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1DC8 All Before 4/deracer◦57(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1F88 All Before 4/deracer◦59(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2068 Transpiler/OhmJS◦60(grammar name)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1C08 iRewriter/Transpiler(semanticsfn)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1CE8 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1F88 All Before 4/deracer◦59(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1EA8 All Before 4/deracer◦58(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2068 Transpiler/OhmJS◦60(grammar)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3E28 Back End/find◦88(go)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1B28 Back End/iRewriter(ohm)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2E68 iRewriter/Transpiler(grammar)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E33A8 Transpiler/fakepipe(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3568 fakepipe/fakepipename◦79(go)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3728 fakepipe/deracer◦81(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3488 fakepipe/deracer◦78(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3728 fakepipe/deracer◦81(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3648 fakepipe/syncfilewrite2◦80(filename)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3648 fakepipe/syncfilewrite2◦80(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3488 fakepipe/deracer◦78(1)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3808 fakepipe/trash◦82(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2F48 Transpiler/All Before 4(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E3028 All Before 4/deracer◦74(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1B28 Back End/iRewriter(rwr)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1C08 iRewriter/Transpiler(input)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1CE8 Transpiler/All Before 4(4)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E1EA8 All Before 4/deracer◦58(2)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2068 Transpiler/OhmJS◦60(semantics)
[DEBUG] --- [12:35:25] HANDLE  0x6000039E2068 Transpiler/OhmJS◦60(input)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E2E68 iRewriter/Transpiler(semantics)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E38E8 Transpiler/fakepipe(input)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3AA8 fakepipe/fakepipename◦84(go)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3C68 fakepipe/deracer◦86(2)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E39C8 fakepipe/deracer◦83(2)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3C68 fakepipe/deracer◦86(1)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3B88 fakepipe/syncfilewrite2◦85(filename)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3B88 fakepipe/syncfilewrite2◦85(input)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E39C8 fakepipe/deracer◦83(1)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3D48 fakepipe/trash◦87(input)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E2F48 Transpiler/All Before 4(3)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E31E8 All Before 4/deracer◦76(2)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E1B28 Back End/iRewriter(grammar name)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E2E68 iRewriter/Transpiler(grammar name)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E2F48 Transpiler/All Before 4(1)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3028 All Before 4/deracer◦74(1)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E31E8 All Before 4/deracer◦76(1)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E3108 All Before 4/deracer◦75(1)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E32C8 Transpiler/OhmJS◦77(grammar name)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E32C8 Transpiler/OhmJS◦77(grammar)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E32C8 Transpiler/OhmJS◦77(semantics)
[DEBUG] --- [12:35:26] HANDLE  0x6000039E32C8 Transpiler/OhmJS◦77(input)


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** 5

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(?◦54)
(Read Text File
(Low Level Read Text File◦55)
(Ensure String Datum◦56))
(Decode
($rt/decode.js))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦57)
(iRewriter
(Transpiler
(All Before 4
(deracer◦58)
(deracer◦59)
(deracer◦60))
(OhmJS◦61)
(fakepipe
(deracer◦62)
(fakepipename◦63)
(syncfilewrite2◦64)
(deracer◦65)
(trash◦66))
(fakepipe
(deracer◦67)
(fakepipename◦68)
(syncfilewrite2◦69)
(deracer◦70)
(trash◦71)))
(rwr◦72)
(rwrohm◦73)
(rwrsemjs◦74)
(Transpiler
(All Before 4
(deracer◦75)
(deracer◦76)
(deracer◦77))
(OhmJS◦78)
(fakepipe
(deracer◦79)
(fakepipename◦80)
(syncfilewrite2◦81)
(deracer◦82)
(trash◦83))
(fakepipe
(deracer◦84)
(fakepipename◦85)
(syncfilewrite2◦86)
(deracer◦87)
(trash◦88))))
(find◦89)))[DEBUG] --- [12:37:29] HANDLE  0x60000349BF08 main/Read Text File(input)
[DEBUG] --- [12:37:29] HANDLE  0x60000349C0E8 Read Text File/Ensure String Datum◦56(operand)
[DEBUG] --- [12:37:29] HANDLE  0x60000349C008 Read Text File/Low Level Read Text File◦55(input)
[DEBUG] --- [12:37:29] HANDLE  0x6000034980E8 main/Front End(input)
[DEBUG] --- [12:37:29] HANDLE  0x6000034981C8 Front End/Delineate Words(input)
[DEBUG] --- [12:37:29] HANDLE  0x6000034982A8 Delineate Words/word◦1(go)
[DEBUG] --- [12:37:29] HANDLE  0x600003498388 Delineate Words/Transpiler(input)
[DEBUG] --- [12:37:29] HANDLE  0x600003498468 Transpiler/All Before 4(4)
[DEBUG] --- [12:37:29] HANDLE  0x600003498628 All Before 4/deracer◦3(2)
[DEBUG] --- [12:37:29] HANDLE  0x600003499348 Delineate Words/wordjs◦16(go)
[DEBUG] --- [12:37:29] HANDLE  0x600003499428 Delineate Words/word◦17(go)
[DEBUG] --- [12:37:29] HANDLE  0x600003498388 Delineate Words/Transpiler(grammarfn)
[DEBUG] --- [12:37:29] HANDLE  0x600003498468 Transpiler/All Before 4(2)
[DEBUG] --- [12:37:29] HANDLE  0x600003498548 All Before 4/deracer◦2(2)
[DEBUG] --- [12:37:29] HANDLE  0x600003498388 Delineate Words/Transpiler(semanticsfn)
[DEBUG] --- [12:37:29] HANDLE  0x600003498468 Transpiler/All Before 4(3)
[DEBUG] --- [12:37:29] HANDLE  0x600003498708 All Before 4/deracer◦4(2)
[DEBUG] --- [12:37:29] HANDLE  0x600003498388 Delineate Words/Transpiler(grammar name)
[DEBUG] --- [12:37:29] HANDLE  0x600003498468 Transpiler/All Before 4(1)
[DEBUG] --- [12:37:29] HANDLE  0x600003498548 All Before 4/deracer◦2(1)
[DEBUG] --- [12:37:29] HANDLE  0x600003498708 All Before 4/deracer◦4(1)
[DEBUG] --- [12:37:29] HANDLE  0x600003498628 All Before 4/deracer◦3(1)
[DEBUG] --- [12:37:29] HANDLE  0x6000034987E8 Transpiler/OhmJS◦5(grammar name)
[DEBUG] --- [12:37:29] HANDLE  0x6000034987E8 Transpiler/OhmJS◦5(grammar)
[DEBUG] --- [12:37:29] HANDLE  0x6000034987E8 Transpiler/OhmJS◦5(semantics)
[DEBUG] --- [12:37:29] HANDLE  0x6000034987E8 Transpiler/OhmJS◦5(input)
[DEBUG] --- [12:37:30] HANDLE  0x600003499508 Front End/Escape Whitespace(input)
[DEBUG] --- [12:37:30] HANDLE  0x6000034995E8 Escape Whitespace/escapesohm◦18(go)
[DEBUG] --- [12:37:30] HANDLE  0x6000034996C8 Escape Whitespace/escapes◦19(go)
[DEBUG] --- [12:37:30] HANDLE  0x6000034997A8 Escape Whitespace/escapesrwr◦20(go)
[DEBUG] --- [12:37:30] HANDLE  0x600003499888 Escape Whitespace/Rewriter(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349A928 Rewriter/rwr◦35(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AA08 Rewriter/rwrohm◦36(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AAE8 Rewriter/rwrsemjs◦37(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AE68 Rewriter/Transpiler(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AF48 Transpiler/All Before 4(4)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B108 All Before 4/deracer◦41(2)
[DEBUG] --- [12:37:30] HANDLE  0x600003499968 Rewriter/Transpiler(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x600003499A48 Transpiler/All Before 4(1)
[DEBUG] --- [12:37:30] HANDLE  0x600003499B28 All Before 4/deracer◦21(1)
[DEBUG] --- [12:37:30] HANDLE  0x600003499968 Rewriter/Transpiler(grammarfn)
[DEBUG] --- [12:37:30] HANDLE  0x600003499A48 Transpiler/All Before 4(2)
[DEBUG] --- [12:37:30] HANDLE  0x600003499B28 All Before 4/deracer◦21(2)
[DEBUG] --- [12:37:30] HANDLE  0x600003499CE8 All Before 4/deracer◦23(1)
[DEBUG] --- [12:37:30] HANDLE  0x600003499DC8 Transpiler/OhmJS◦24(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x600003499968 Rewriter/Transpiler(semanticsfn)
[DEBUG] --- [12:37:30] HANDLE  0x600003499A48 Transpiler/All Before 4(3)
[DEBUG] --- [12:37:30] HANDLE  0x600003499CE8 All Before 4/deracer◦23(2)
[DEBUG] --- [12:37:30] HANDLE  0x600003499C08 All Before 4/deracer◦22(1)
[DEBUG] --- [12:37:30] HANDLE  0x600003499DC8 Transpiler/OhmJS◦24(grammar)
[DEBUG] --- [12:37:30] HANDLE  0x600003499888 Escape Whitespace/Rewriter(ohmfn)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AE68 Rewriter/Transpiler(grammarfn)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AF48 Transpiler/All Before 4(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B028 All Before 4/deracer◦40(2)
[DEBUG] --- [12:37:30] HANDLE  0x600003499888 Escape Whitespace/Rewriter(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AE68 Rewriter/Transpiler(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AF48 Transpiler/All Before 4(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B028 All Before 4/deracer◦40(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B1E8 All Before 4/deracer◦42(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B2C8 Transpiler/OhmJS◦43(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x600003499888 Escape Whitespace/Rewriter(rwrfn)
[DEBUG] --- [12:37:30] HANDLE  0x60000349ABC8 Rewriter/Read Text File(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AD88 Read Text File/Ensure String Datum◦39(operand)
[DEBUG] --- [12:37:30] HANDLE  0x60000349ACA8 Read Text File/Low Level Read Text File◦38(input)
[DEBUG] --- [12:37:30] HANDLE  0x600003499968 Rewriter/Transpiler(input)
[DEBUG] --- [12:37:30] HANDLE  0x600003499A48 Transpiler/All Before 4(4)
[DEBUG] --- [12:37:30] HANDLE  0x600003499C08 All Before 4/deracer◦22(2)
[DEBUG] --- [12:37:30] HANDLE  0x600003499DC8 Transpiler/OhmJS◦24(semantics)
[DEBUG] --- [12:37:30] HANDLE  0x600003499DC8 Transpiler/OhmJS◦24(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AE68 Rewriter/Transpiler(semantics)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B8E8 Transpiler/fakepipe(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BAA8 fakepipe/fakepipename◦50(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BC68 fakepipe/deracer◦52(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B9C8 fakepipe/deracer◦49(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BC68 fakepipe/deracer◦52(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BB88 fakepipe/syncfilewrite2◦51(filename)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BB88 fakepipe/syncfilewrite2◦51(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B9C8 fakepipe/deracer◦49(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BD48 fakepipe/trash◦53(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349AF48 Transpiler/All Before 4(3)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B1E8 All Before 4/deracer◦42(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B108 All Before 4/deracer◦41(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B2C8 Transpiler/OhmJS◦43(grammar)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B2C8 Transpiler/OhmJS◦43(semantics)
[DEBUG] --- [12:37:30] HANDLE  0x60000349B2C8 Transpiler/OhmJS◦43(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349BE28 main/?◦54(input)
?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 109ACB070, reclaim = nil, asString = proc(^Datum) -> string @ 109ACBAB0}
[DEBUG] --- [12:37:30] HANDLE  0x60000349C388 main/Back End(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C468 Back End/$m4 fr/find.ohm(stdin)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C548 Back End/$m4 fr/find.rwr(stdin)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C708 Back End/iRewriter(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349D7A8 iRewriter/rwr◦72(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349D888 iRewriter/rwrohm◦73(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349D968 iRewriter/rwrsemjs◦74(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DA48 iRewriter/Transpiler(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DB28 Transpiler/All Before 4(4)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DCE8 All Before 4/deracer◦76(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C7E8 iRewriter/Transpiler(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C8C8 Transpiler/All Before 4(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C9A8 All Before 4/deracer◦58(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C7E8 iRewriter/Transpiler(grammarfn)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C8C8 Transpiler/All Before 4(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C9A8 All Before 4/deracer◦58(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CB68 All Before 4/deracer◦60(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CC48 Transpiler/OhmJS◦61(grammar name)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C7E8 iRewriter/Transpiler(semanticsfn)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C8C8 Transpiler/All Before 4(3)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CB68 All Before 4/deracer◦60(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CA88 All Before 4/deracer◦59(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CC48 Transpiler/OhmJS◦61(grammar)
[DEBUG] --- [12:37:30] HANDLE  0x60000349EA08 Back End/find◦89(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C708 Back End/iRewriter(ohm)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DA48 iRewriter/Transpiler(grammar)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DF88 Transpiler/fakepipe(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E148 fakepipe/fakepipename◦80(go)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E308 fakepipe/deracer◦82(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E068 fakepipe/deracer◦79(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E308 fakepipe/deracer◦82(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E228 fakepipe/syncfilewrite2◦81(filename)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E228 fakepipe/syncfilewrite2◦81(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E068 fakepipe/deracer◦79(1)
[DEBUG] --- [12:37:30] HANDLE  0x60000349E3E8 fakepipe/trash◦83(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DB28 Transpiler/All Before 4(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349DC08 All Before 4/deracer◦75(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C708 Back End/iRewriter(rwr)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C7E8 iRewriter/Transpiler(input)
[DEBUG] --- [12:37:30] HANDLE  0x60000349C8C8 Transpiler/All Before 4(4)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CA88 All Before 4/deracer◦59(2)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CC48 Transpiler/OhmJS◦61(semantics)
[DEBUG] --- [12:37:30] HANDLE  0x60000349CC48 Transpiler/OhmJS◦61(input)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DA48 iRewriter/Transpiler(semantics)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E4C8 Transpiler/fakepipe(input)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E688 fakepipe/fakepipename◦85(go)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E848 fakepipe/deracer◦87(2)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E5A8 fakepipe/deracer◦84(2)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E848 fakepipe/deracer◦87(1)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E768 fakepipe/syncfilewrite2◦86(filename)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E768 fakepipe/syncfilewrite2◦86(input)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E5A8 fakepipe/deracer◦84(1)
[DEBUG] --- [12:37:31] HANDLE  0x60000349E928 fakepipe/trash◦88(input)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DB28 Transpiler/All Before 4(3)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DDC8 All Before 4/deracer◦77(2)
[DEBUG] --- [12:37:31] HANDLE  0x60000349C708 Back End/iRewriter(grammar name)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DA48 iRewriter/Transpiler(grammar name)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DB28 Transpiler/All Before 4(1)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DC08 All Before 4/deracer◦75(1)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DDC8 All Before 4/deracer◦77(1)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DCE8 All Before 4/deracer◦76(1)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DEA8 Transpiler/OhmJS◦78(grammar name)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DEA8 Transpiler/OhmJS◦78(grammar)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DEA8 Transpiler/OhmJS◦78(semantics)
[DEBUG] --- [12:37:31] HANDLE  0x60000349DEA8 Transpiler/OhmJS◦78(input)


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** Info

(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(?◦54)
(Read Text File
(Low Level Read Text File◦55)
(Ensure String Datum◦56))
(Decode
($rt/decode.js))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦57)
(iRewriter
(Transpiler
(All Before 4
(deracer◦58)
(deracer◦59)
(deracer◦60))
(OhmJS◦61)
(fakepipe
(deracer◦62)
(fakepipename◦63)
(syncfilewrite2◦64)
(deracer◦65)
(trash◦66))
(fakepipe
(deracer◦67)
(fakepipename◦68)
(syncfilewrite2◦69)
(deracer◦70)
(trash◦71)))
(rwr◦72)
(rwrohm◦73)
(rwrsemjs◦74)
(Transpiler
(All Before 4
(deracer◦75)
(deracer◦76)
(deracer◦77))
(OhmJS◦78)
(fakepipe
(deracer◦79)
(fakepipename◦80)
(syncfilewrite2◦81)
(deracer◦82)
(trash◦83))
(fakepipe
(deracer◦84)
(fakepipename◦85)
(syncfilewrite2◦86)
(deracer◦87)
(trash◦88))))
(find◦89)))?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 103FD06F0, reclaim = nil, asString = proc(^Datum) -> string @ 103FD0CF0}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(9:2) Undeclared name: print_hierarchy
	print_hierarchy (child)
	^~~~~~~~~~~~~~^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** Info
[INFO ] --- [12:43:22] 
(main
[INFO ] --- [12:43:22] 
(Front End
[INFO ] --- [12:43:22] 
(Delineate Words
[INFO ] --- [12:43:22] 
(word◦1
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(Transpiler
[INFO ] --- [12:43:22] 
(All Before 4
[INFO ] --- [12:43:22] 
(deracer◦2
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(deracer◦3
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(deracer◦4
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(OhmJS◦5
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(fakepipe
[INFO ] --- [12:43:22] 
(deracer◦6
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(fakepipename◦7
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(syncfilewrite2◦8
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(deracer◦9
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(trash◦10
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(fakepipe
[INFO ] --- [12:43:22] 
(deracer◦11
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(fakepipename◦12
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(syncfilewrite2◦13
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(deracer◦14
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(trash◦15
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(wordjs◦16
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(word◦17
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(Escape Whitespace
[INFO ] --- [12:43:22] 
(escapesohm◦18
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(escapes◦19
[INFO ] --- [12:43:22] )
[INFO ] --- [12:43:22] 
(escapesrwr◦20
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Rewriter
[INFO ] --- [12:43:23] 
(Transpiler
[INFO ] --- [12:43:23] 
(All Before 4
[INFO ] --- [12:43:23] 
(deracer◦21
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦22
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦23
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(OhmJS◦24
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦25
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦26
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦27
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦28
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦29
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦30
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦31
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦32
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦33
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦34
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(rwr◦35
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(rwrohm◦36
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(rwrsemjs◦37
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Read Text File
[INFO ] --- [12:43:23] 
(Low Level Read Text File◦38
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Ensure String Datum◦39
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Transpiler
[INFO ] --- [12:43:23] 
(All Before 4
[INFO ] --- [12:43:23] 
(deracer◦40
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦41
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦42
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(OhmJS◦43
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦44
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦45
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦46
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦47
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦48
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦49
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦50
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦51
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦52
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦53
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(?◦54
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Read Text File
[INFO ] --- [12:43:23] 
(Low Level Read Text File◦55
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Ensure String Datum◦56
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Decode
[INFO ] --- [12:43:23] 
($rt/decode.js
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Back End
[INFO ] --- [12:43:23] 
($m4 fr/find.ohm
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
($m4 fr/find.rwr
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(?◦57
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(iRewriter
[INFO ] --- [12:43:23] 
(Transpiler
[INFO ] --- [12:43:23] 
(All Before 4
[INFO ] --- [12:43:23] 
(deracer◦58
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦59
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦60
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(OhmJS◦61
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦62
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦63
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦64
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦65
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦66
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦67
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦68
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦69
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦70
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦71
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(rwr◦72
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(rwrohm◦73
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(rwrsemjs◦74
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(Transpiler
[INFO ] --- [12:43:23] 
(All Before 4
[INFO ] --- [12:43:23] 
(deracer◦75
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦76
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦77
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(OhmJS◦78
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦79
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦80
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦81
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦82
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦83
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipe
[INFO ] --- [12:43:23] 
(deracer◦84
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(fakepipename◦85
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(syncfilewrite2◦86
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(deracer◦87
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(trash◦88
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] 
(find◦89
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
[INFO ] --- [12:43:23] )
?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 104BCCA00, reclaim = nil, asString = proc(^Datum) -> string @ 104BCCD90}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(6:29) Undeclared name: zd
	log_hierarchy :: proc (c : ^zd.Eh) {
	                            ^^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(10:31) Undeclared name: zd
	build_hierarchy :: proc (c : ^zd.Eh) -> string {
	                              ^^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/main.odin(67:26) Cannot assign value 'main_container' of type '^Eh' to '^invalid type' in procedure argument
	debug.log_hierarchy (main_container)
	                     ^~~~~~~~~~~~~^

/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(12:18) 'c' of type '^invalid type' has no field 'children'
	for child in c.children {
	             ^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(13:47) Undeclared name: child
	s = fmt.aprintf ("%s%s", s, build_hierarchy (child))
	                                             ^~~~^
/Users/tarvydas/quicklisp/local-projects/find-and-replace/debug/debug.odin(15:35) 'c' of type '^invalid type' has no field 'name'
	return fmt.aprintf ("(%s%s)", c.name, s)
	                              ^
make: *** [dev] Error 1
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** Info
[INFO ] --- [12:52:03] (main(Front End(Delineate Words(word◦1)(Transpiler(All Before 4(deracer◦2)(deracer◦3)(deracer◦4))(OhmJS◦5)(fakepipe(deracer◦6)(fakepipename◦7)(syncfilewrite2◦8)(deracer◦9)(trash◦10))(fakepipe(deracer◦11)(fakepipename◦12)(syncfilewrite2◦13)(deracer◦14)(trash◦15)))(wordjs◦16)(word◦17))(Escape Whitespace(escapesohm◦18)(escapes◦19)(escapesrwr◦20)(Rewriter(Transpiler(All Before 4(deracer◦21)(deracer◦22)(deracer◦23))(OhmJS◦24)(fakepipe(deracer◦25)(fakepipename◦26)(syncfilewrite2◦27)(deracer◦28)(trash◦29))(fakepipe(deracer◦30)(fakepipename◦31)(syncfilewrite2◦32)(deracer◦33)(trash◦34)))(rwr◦35)(rwrohm◦36)(rwrsemjs◦37)(Read Text File(Low Level Read Text File◦38)(Ensure String Datum◦39))(Transpiler(All Before 4(deracer◦40)(deracer◦41)(deracer◦42))(OhmJS◦43)(fakepipe(deracer◦44)(fakepipename◦45)(syncfilewrite2◦46)(deracer◦47)(trash◦48))(fakepipe(deracer◦49)(fakepipename◦50)(syncfilewrite2◦51)(deracer◦52)(trash◦53))))))(?◦54)(Read Text File(Low Level Read Text File◦55)(Ensure String Datum◦56))(Decode($rt/decode.js))(Back End($m4 fr/find.ohm)($m4 fr/find.rwr)(?◦57)(iRewriter(Transpiler(All Before 4(deracer◦58)(deracer◦59)(deracer◦60))(OhmJS◦61)(fakepipe(deracer◦62)(fakepipename◦63)(syncfilewrite2◦64)(deracer◦65)(trash◦66))(fakepipe(deracer◦67)(fakepipename◦68)(syncfilewrite2◦69)(deracer◦70)(trash◦71)))(rwr◦72)(rwrohm◦73)(rwrsemjs◦74)(Transpiler(All Before 4(deracer◦75)(deracer◦76)(deracer◦77))(OhmJS◦78)(fakepipe(deracer◦79)(fakepipename◦80)(syncfilewrite2◦81)(deracer◦82)(trash◦83))(fakepipe(deracer◦84)(fakepipename◦85)(syncfilewrite2◦86)(deracer◦87)(trash◦88))))(find◦89)))

?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 109030000, reclaim = nil, asString = proc(^Datum) -> string @ 109031480}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none
*** starting logger level %v *** Info
[INFO ] --- [12:52:34] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(?◦54)
(Read Text File
(Low Level Read Text File◦55)
(Ensure String Datum◦56))
(Decode
($rt/decode.js))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦57)
(iRewriter
(Transpiler
(All Before 4
(deracer◦58)
(deracer◦59)
(deracer◦60))
(OhmJS◦61)
(fakepipe
(deracer◦62)
(fakepipename◦63)
(syncfilewrite2◦64)
(deracer◦65)
(trash◦66))
(fakepipe
(deracer◦67)
(fakepipename◦68)
(syncfilewrite2◦69)
(deracer◦70)
(trash◦71)))
(rwr◦72)
(rwrohm◦73)
(rwrsemjs◦74)
(Transpiler
(All Before 4
(deracer◦75)
(deracer◦76)
(deracer◦77))
(OhmJS◦78)
(fakepipe
(deracer◦79)
(fakepipename◦80)
(syncfilewrite2◦81)
(deracer◦82)
(trash◦83))
(fakepipe
(deracer◦84)
(fakepipename◦85)
(syncfilewrite2◦86)
(deracer◦87)
(trash◦88))))
(find◦89)))

?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10382A420, reclaim = nil, asString = proc(^Datum) -> string @ 10382A830}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [12:53:25] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(?◦54)
(Read Text File
(Low Level Read Text File◦55)
(Ensure String Datum◦56))
(Decode
($rt/decode.js))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦57)
(iRewriter
(Transpiler
(All Before 4
(deracer◦58)
(deracer◦59)
(deracer◦60))
(OhmJS◦61)
(fakepipe
(deracer◦62)
(fakepipename◦63)
(syncfilewrite2◦64)
(deracer◦65)
(trash◦66))
(fakepipe
(deracer◦67)
(fakepipename◦68)
(syncfilewrite2◦69)
(deracer◦70)
(trash◦71)))
(rwr◦72)
(rwrohm◦73)
(rwrsemjs◦74)
(Transpiler
(All Before 4
(deracer◦75)
(deracer◦76)
(deracer◦77))
(OhmJS◦78)
(fakepipe
(deracer◦79)
(fakepipename◦80)
(syncfilewrite2◦81)
(deracer◦82)
(trash◦83))
(fakepipe
(deracer◦84)
(fakepipename◦85)
(syncfilewrite2◦86)
(deracer◦87)
(trash◦88))))
(find◦89)))

?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10E0B1BF0, reclaim = nil, asString = proc(^Datum) -> string @ 10E0B1F80}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [12:57:40] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(?◦54)
(Read Text File
(Low Level Read Text File◦55)
(Ensure String Datum◦56))
(Decode
($rt/decode.js))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦57)
(iRewriter
(Transpiler
(All Before 4
(deracer◦58)
(deracer◦59)
(deracer◦60))
(OhmJS◦61)
(fakepipe
(deracer◦62)
(fakepipename◦63)
(syncfilewrite2◦64)
(deracer◦65)
(trash◦66))
(fakepipe
(deracer◦67)
(fakepipename◦68)
(syncfilewrite2◦69)
(deracer◦70)
(trash◦71)))
(rwr◦72)
(rwrohm◦73)
(rwrsemjs◦74)
(Transpiler
(All Before 4
(deracer◦75)
(deracer◦76)
(deracer◦77))
(OhmJS◦78)
(fakepipe
(deracer◦79)
(fakepipename◦80)
(syncfilewrite2◦81)
(deracer◦82)
(trash◦83))
(fakepipe
(deracer◦84)
(fakepipename◦85)
(syncfilewrite2◦86)
(deracer◦87)
(trash◦88))))
(find◦89)))

?◦54 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10A63A1A0, reclaim = nil, asString = proc(^Datum) -> string @ 10A63A590}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦61,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦78,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦78,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:13:11] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10A8CC4C0, reclaim = nil, asString = proc(^Datum) -> string @ 10A8CCB10}


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:17:26] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 102B55300, reclaim = nil, asString = proc(^Datum) -> string @ 102B556F0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:19:58] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe:  %!(MISSING ARGUMENT) %!(MISSING ARGUMENT)
ohmjs_maybe:  %!(MISSING ARGUMENT) %!(MISSING ARGUMENT)
ohmjs_maybe:  %!(MISSING ARGUMENT) %!(MISSING ARGUMENT)
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10394D1D0, reclaim = nil, asString = proc(^Datum) -> string @ 10394D760}
ohmjs_maybe:  %!(MISSING ARGUMENT) %!(MISSING ARGUMENT)
ohmjs_maybe: Cannot read property 'rwr' of undefined %!(MISSING ARGUMENT) %!(MISSING ARGUMENT)


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:20:11] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe:  %!(MISSING ARGUMENT)
ohmjs_maybe:  %!(MISSING ARGUMENT)
ohmjs_maybe:  %!(MISSING ARGUMENT)
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10A62C5F0, reclaim = nil, asString = proc(^Datum) -> string @ 10A62CEF0}
ohmjs_maybe:  %!(MISSING ARGUMENT)
ohmjs_maybe: Cannot read property 'rwr' of undefined %!(MISSING ARGUMENT)


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:20:37] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1 
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 101457AA0, reclaim = nil, asString = proc(^Datum) -> string @ 101457F50}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3 Cannot read property 'rwr' of undefined


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ ls /tmp
ls /tmp
PFU_711F5E50-978C-41FC-B06E-E77D40F6064C	fakepipename3
com.apple.launchd.WfhR5cpQ5I			junk.lisp
com.google.Keystone				powerlog
fakepipename1					xxx.odin
fakepipename2
(base) $ ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3
ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3
  C-c C-c^C
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:56:53] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(fakepipe
(deracer◦2)
(fakepipename◦3)
(syncfilewrite2◦4)
(deracer◦5)
(trash◦6))
(OhmJS◦7)
(fakepipe
(deracer◦8)
(fakepipename◦9)
(syncfilewrite2◦10)
(deracer◦11)
(trash◦12))
(fakepipe
(deracer◦13)
(fakepipename◦14)
(syncfilewrite2◦15)
(deracer◦16)
(trash◦17))
(All Before 4
(deracer◦18)
(deracer◦19)
(deracer◦20)))
(wordjs◦21)
(word◦22))
(Escape Whitespace
(escapesohm◦23)
(escapes◦24)
(escapesrwr◦25)
(Rewriter
(Transpiler
(fakepipe
(deracer◦26)
(fakepipename◦27)
(syncfilewrite2◦28)
(deracer◦29)
(trash◦30))
(OhmJS◦31)
(fakepipe
(deracer◦32)
(fakepipename◦33)
(syncfilewrite2◦34)
(deracer◦35)
(trash◦36))
(fakepipe
(deracer◦37)
(fakepipename◦38)
(syncfilewrite2◦39)
(deracer◦40)
(trash◦41))
(All Before 4
(deracer◦42)
(deracer◦43)
(deracer◦44)))
(rwr◦45)
(rwrohm◦46)
(rwrsemjs◦47)
(Read Text File
(Low Level Read Text File◦48)
(Ensure String Datum◦49))
(Transpiler
(fakepipe
(deracer◦50)
(fakepipename◦51)
(syncfilewrite2◦52)
(deracer◦53)
(trash◦54))
(OhmJS◦55)
(fakepipe
(deracer◦56)
(fakepipename◦57)
(syncfilewrite2◦58)
(deracer◦59)
(trash◦60))
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(All Before 4
(deracer◦66)
(deracer◦67)
(deracer◦68))))))
(Read Text File
(Low Level Read Text File◦69)
(Ensure String Datum◦70))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦71)
(iRewriter
(Transpiler
(fakepipe
(deracer◦72)
(fakepipename◦73)
(syncfilewrite2◦74)
(deracer◦75)
(trash◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))
(All Before 4
(deracer◦88)
(deracer◦89)
(deracer◦90)))
(rwr◦91)
(rwrohm◦92)
(rwrsemjs◦93)
(Transpiler
(fakepipe
(deracer◦94)
(fakepipename◦95)
(syncfilewrite2◦96)
(deracer◦97)
(trash◦98))
(OhmJS◦99)
(fakepipe
(deracer◦100)
(fakepipename◦101)
(syncfilewrite2◦102)
(deracer◦103)
(trash◦104))
(fakepipe
(deracer◦105)
(fakepipename◦106)
(syncfilewrite2◦107)
(deracer◦108)
(trash◦109))
(All Before 4
(deracer◦110)
(deracer◦111)
(deracer◦112))))
(find◦113))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js Line 1, col 1:
> 1 | /tmp/fakepipename3
      ^
Expected a letter or "_"
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename4 while loading operation rwr: (): Unexpected token ')'
?◦71 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10DA98DA0, reclaim = nil, asString = proc(^Datum) -> string @ 10DA9A1A0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js Line 1, col 1:
> 1 | /tmp/fakepipename7
      ^
Expected a letter or "_"
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename6 /tmp/fakepipename8 Line 1, col 1:
> 1 | /tmp/fakepipename5
      ^
Expected "#"


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦7,input⟩}, {«error» ⎨Line 1, col 1:
> 1 | /tmp/fakepipename3
      ^
Expected a letter or "_"⎬ <- ⟨OhmJS◦31,input⟩}, {«error» ⎨while loading operation rwr: (): Unexpected token ')'⎬ <- ⟨OhmJS◦55,input⟩}, {«error» ⎨Line 1, col 1:
> 1 | /tmp/fakepipename7
      ^
Expected a letter or "_"⎬ <- ⟨OhmJS◦77,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦99,input⟩}, {«error» ⎨Line 1, col 1:
> 1 | /tmp/fakepipename5
      ^
Expected "#"⎬ <- ⟨OhmJS◦99,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:57:59] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1 
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 107012BF0, reclaim = nil, asString = proc(^Datum) -> string @ 107015680}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js 
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3 Cannot read property 'rwr' of undefined


--- Outputs ---
[{«error» ⎨⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [13:59:01] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1 /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 107A51BF0, reclaim = nil, asString = proc(^Datum) -> string @ 107A52A10}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3 /tmp/fakepipename3
Cannot read property 'rwr' of undefined


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨/tmp/fakepipename3
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [14:50:49] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1 /tmp/fakepipename1


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«output» ⎨## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}]
## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [14:52:20] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
%!(EXTRA ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js)ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
%!(EXTRA ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js)ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
%!(EXTRA ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1)

--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«output» ⎨## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}]
## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [14:53:15] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«output» ⎨## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}]
## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:07:23] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10D085500, reclaim = nil, asString = proc(^Datum) -> string @ 10D086A00}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨/tmp/fakepipename3
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:08:51] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
(?◦56)
(iRewriter
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
($m4 fr/find.rwr)
(find◦88)
($m4 fr/find.ohm))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«output» ⎨## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>⎬ <- ⟨OhmJS◦43,input⟩}]
## %20 ❲Find❳
<❲mark❳>❲Loop❳</❲mark❳>
      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {
          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>
      }



  ---

 - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;
 - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>
 - <❲mark❳>❲Clause❳</❲mark❳>
	- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺
	- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺

- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;

- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:10:00] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(Transpiler
(All Before 4
(deracer◦56)
(deracer◦57)
(deracer◦58))
(OhmJS◦59)
(fakepipe
(deracer◦60)
(fakepipename◦61)
(syncfilewrite2◦62)
(deracer◦63)
(trash◦64))
(fakepipe
(deracer◦65)
(fakepipename◦66)
(syncfilewrite2◦67)
(deracer◦68)
(trash◦69)))
(rwr◦70)
(rwrohm◦71)
(rwrsemjs◦72)
(Transpiler
(All Before 4
(deracer◦73)
(deracer◦74)
(deracer◦75))
(OhmJS◦76)
(fakepipe
(deracer◦77)
(fakepipename◦78)
(syncfilewrite2◦79)
(deracer◦80)
(trash◦81))
(fakepipe
(deracer◦82)
(fakepipename◦83)
(syncfilewrite2◦84)
(deracer◦85)
(trash◦86))))
(find◦87))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦59,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦76,input⟩}, {«error» ⎨/tmp/fakepipename3
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦76,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:12:55] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(Transpiler
(All Before 4
(deracer◦57)
(deracer◦58)
(deracer◦59))
(OhmJS◦60)
(fakepipe
(deracer◦61)
(fakepipename◦62)
(syncfilewrite2◦63)
(deracer◦64)
(trash◦65))
(fakepipe
(deracer◦66)
(fakepipename◦67)
(syncfilewrite2◦68)
(deracer◦69)
(trash◦70)))
(rwr◦71)
(rwrohm◦72)
(rwrsemjs◦73)
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10B8CE0F0, reclaim = nil, asString = proc(^Datum) -> string @ 10B8CE5A0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦60,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨/tmp/fakepipename3
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:13:42] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10657CC80, reclaim = nil, asString = proc(^Datum) -> string @ 10657D320}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨rwr/rwr.sem.js⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨/tmp/fakepipename3
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:17:02] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 102D973B0, reclaim = nil, asString = proc(^Datum) -> string @ 102D97CD0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨{
  _: [ 'Word', 'rt/word.ohm', 'rt/word.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rt/word.sem.js⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨{
  _: [ 'Escapes', 'rt/escapes.ohm', '/tmp/fakepipename1' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename1⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename3
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:24:02] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1033BD8F0, reclaim = nil, asString = proc(^Datum) -> string @ 1033BDE80}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨{
  _: [ 'Word', 'rt/word.ohm', 'rt/word.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rt/word.sem.js
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'Word',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'input',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], undefined, [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object],
      ... 847 more items
    ],
    input: '## Find\n' +
      '<mark>Loop</mark>\n' +
      '      loop over <sub><i>SymbolListName</i></sub> ⇒ <sub><i>SingleSymbolName</i></sub> {\n' +
      '          <sub><i>TerminationClause</i></sub> <sub><i>Iteration</i></sub> <sub><i>Clause</i></sub>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <mark>TerminationClause</mark>    termination : <sub><i>Clause</i></sub> ;\n' +
      ' - <mark>IterationClause</mark>           iteration : <u><sub><i>Statement</i></sub></u><sub>?</sub>\n' +
      ' - <mark>Clause</mark>\n' +
      '\t- #nested                        { <sub><i>Statement</i></sub> } ↺\n' +
      '\t- #other                         <u><span style="color: #FF76C1;">;<sup>≠</sup></span> <span style="color: #FF76C1;">{<sup>≠</sup></span> <span style="color: #FF76C1;">}<sup>≠</sup></span> <span style="color:#00B040;">✓</span></u><sub>1...</sub>  ↺\n' +
      '\n' +
      '- <mark>Statement</mark>                   <sub><i>Clause</i></sub> ;\n' +
      '\n' +
      '- <mark>SymbolListName</mark>       `=` <sub><i>word</i></sub>\n' +
      '- <mark>SingleSymbolName</mark>  `=` <sub><i>word</i></sub>\n'
  },
  input: '## Find\n' +
    '<mark>Loop</mark>\n' +
    '      loop over <sub><i>SymbolListName</i></sub> ⇒ <sub><i>SingleSymbolName</i></sub> {\n' +
    '          <sub><i>TerminationClause</i></sub> <sub><i>Iteration</i></sub> <sub><i>Clause</i></sub>\n' +
    '      }\n' +
    '\n' +
    '\n' +
    '\n' +
    '  ---\n' +
    '\n' +
    ' - <mark>TerminationClause</mark>    termination : <sub><i>Clause</i></sub> ;\n' +
    ' - <mark>IterationClause</mark>           iteration : <u><sub><i>Statement</i></sub></u><sub>?</sub>\n' +
    ' - <mark>Clause</mark>\n' +
    '\t- #nested                        { <sub><i>Statement</i></sub> } ↺\n' +
    '\t- #other                         <u><span style="color: #FF76C1;">;<sup>≠</sup></span> <span style="color: #FF76C1;">{<sup>≠</sup></span> <span style="color: #FF76C1;">}<sup>≠</sup></span> <span style="color:#00B040;">✓</span></u><sub>1...</sub>  ↺\n' +
    '\n' +
    '- <mark>Statement</mark>                   <sub><i>Clause</i></sub> ;\n' +
    '\n' +
    '- <mark>SymbolListName</mark>       `=` <sub><i>word</i></sub>\n' +
    '- <mark>SingleSymbolName</mark>  `=` <sub><i>word</i></sub>\n',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 946,
    ruleName: 'input',
    children: [ [IterationNode] ],
    childOffsets: [ 0 ],
    grammar: {
      name: 'Word',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'input',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 946,
  _rightmostFailures: undefined
}⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object],
      ... 274 more items
    ],
    input: 'Escapes {\n' +
      '  text [c+] = ‛«c»’\n' +
      '  char_string [ldq cs* rdq] = ‛«ldq»«encodeURIComponent (cs)»«rdq»’\n' +
      '  char_comment [kcomment cs* nl] = ‛«kcomment»«encodeURIComponent (cs)»«nl»’\n' +
      '  char_word [lb cs+ rb] = ‛«lb»«encodeURIComponent (cs)»«rb»’\n' +
      '  char_any [c] = ‛«c»’\n' +
      '\n' +
      '  wordchar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
      '  wordchar_bottom [c] = ‛«c»’\n' +
      '\n' +
      '  dq [c] = ‛«c»’\n' +
      '  nl [c] = ‛«c»’\n' +
      '\n' +
      '}\n'
  },
  input: 'Escapes {\n' +
    '  text [c+] = ‛«c»’\n' +
    '  char_string [ldq cs* rdq] = ‛«ldq»«encodeURIComponent (cs)»«rdq»’\n' +
    '  char_comment [kcomment cs* nl] = ‛«kcomment»«encodeURIComponent (cs)»«nl»’\n' +
    '  char_word [lb cs+ rb] = ‛«lb»«encodeURIComponent (cs)»«rb»’\n' +
    '  char_any [c] = ‛«c»’\n' +
    '\n' +
    '  wordchar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
    '  wordchar_bottom [c] = ‛«c»’\n' +
    '\n' +
    '  dq [c] = ‛«c»’\n' +
    '  nl [c] = ‛«c»’\n' +
    '\n' +
    '}\n',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 373,
    ruleName: 'top',
    children: [
      [NonterminalNode],
      [NonterminalNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode]
    ],
    childOffsets: [
       0,   0,   7,   8,   9,
      12, 371, 371, 372, 373
    ],
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 373,
  _rightmostFailures: undefined
}⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨{
  _: [ 'Escapes', 'rt/escapes.ohm', '/tmp/fakepipename1' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename1
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'Escapes',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'text',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object],
      ... 1068 more items
    ],
    input: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color: #FF76C1;">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color:#00B040;">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>'
  },
  input: '## %20 ❲Find❳\n' +
    '<❲mark❳>❲Loop❳</❲mark❳>\n' +
    '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
    '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
    '      }\n' +
    '\n' +
    '\n' +
    '\n' +
    '  ---\n' +
    '\n' +
    ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
    ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
    '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
    '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color: #FF76C1;">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color:#00B040;">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
    '\n' +
    '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    '\n' +
    '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
    '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 1167,
    ruleName: 'text',
    children: [ [IterationNode] ],
    childOffsets: [ 0 ],
    grammar: {
      name: 'Escapes',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'text',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 1167,
  _rightmostFailures: undefined
}⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object],
      ... 1618 more items
    ],
    input: 'Find {\n' +
      '  FindSCN [Heading Rule+ AuxRule*] = ‛«Heading»«Rule»«AuxRule»’\n' +
      '\n' +
      '  Heading [koctothorpe+ kblank Name] = ‛«koctothorpe»«kblank»«Name»’\n' +
      '\n' +
      '  Rule [RuleName RuleBody] = ‛«RuleName»«RuleBody»’\n' +
      '  AuxRule [kdash RuleName RuleBody] = ‛«kdash»«RuleName»«RuleBody»’\n' +
      '\n' +
      '  RuleBody [RuleBranch+] = ‛«RuleBranch»’\n' +
      '\n' +
      '  Branch_tagged [kdash Tag MatchItems+] = ‛«kdash»«Tag»«MatchItems»’\n' +
      '  Branch_untagged [MatchItems+] = ‛«MatchItems»’\n' +
      '\n' +
      '  RuleName [lt kmark gt Name lts kmark2 gt2] = ‛«lt»«kmark»«gt»«Name»«lts»«mark2»«gt2»’\n' +
      '\n' +
      '  // MatchItem - covered by OhmJS\n' +
      '\n' +
      '  RuleApplication [lt ksub gt lt ki gt Name lts ki gt  lts ksub gt] = ‛«lt»«ksub»«gt»«lt»«ki»«gt»«Name»«lts»«ki»«gt»«lts»«ksub»«gt»’\n' +
      '  Recursion [krec] = ‛«krec»’\n' +
      '  NegativeMatch [lt kspan kstyle keq red gt item lt ksup gt kne lts ksup gt lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«red»«gt»«item»«lt»«ksup»«gt»«kne»«lts»«ksup»«gt»«lts»«kspan»«gt»’\n' +
      '  // Iteration [OneOrMore | ZeroOrMore | Optional\n' +
      '  OneOrMore [Vinculum lt ksub gt k1 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k1»«lts»«ksub»«gt»’\n' +
      '  ZeroOrMore [Vinculum lt ksub gt k0 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k0»«lts»«ksub»«gt»’\n' +
      '  Optional [Vinculum lt ksub gt kq lts ksub gt] = ‛«inculum»«lt»«ksub»«gt»«kq»«lts»«ksub»«gt»’\n' +
      '  Vinculum [lt ku gt MatchItem+ lts ku gt] = ‛«lt»«ku»«gt»«MatchItem»«lts»«ku»«gt»’\n' +
      '  Any [lt kspan kstyle keq green gt kcheckmark lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«green»«gt»«kcheckmark»«lts»«kspan»«gt»’\n' +
      '\n' +
      '  // character\n' +
      '  Tag [koctothorpe Name] = ‛«koctothorpe»«Name»’\n' +
      '  word [lb s rb] = ‛«lb»«s»«rb»’\n' +
      '  string [dq1 s dq2] = ‛«dq1»«s»«dq2»’\n' +
      '  Name [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
      '  NameChar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
      '  // NameChar_other\n' +
      '  // Line\n' +
      '  // space\n' +
      '  // dq\n' +
      '}\n'
  },
  input: 'Find {\n' +
    '  FindSCN [Heading Rule+ AuxRule*] = ‛«Heading»«Rule»«AuxRule»’\n' +
    '\n' +
    '  Heading [koctothorpe+ kblank Name] = ‛«koctothorpe»«kblank»«Name»’\n' +
    '\n' +
    '  Rule [RuleName RuleBody] = ‛«RuleName»«RuleBody»’\n' +
    '  AuxRule [kdash RuleName RuleBody] = ‛«kdash»«RuleName»«RuleBody»’\n' +
    '\n' +
    '  RuleBody [RuleBranch+] = ‛«RuleBranch»’\n' +
    '\n' +
    '  Branch_tagged [kdash Tag MatchItems+] = ‛«kdash»«Tag»«MatchItems»’\n' +
    '  Branch_untagged [MatchItems+] = ‛«MatchItems»’\n' +
    '\n' +
    '  RuleName [lt kmark gt Name lts kmark2 gt2] = ‛«lt»«kmark»«gt»«Name»«lts»«mark2»«gt2»’\n' +
    '\n' +
    '  // MatchItem - covered by OhmJS\n' +
    '\n' +
    '  RuleApplication [lt ksub gt lt ki gt Name lts ki gt  lts ksub gt] = ‛«lt»«ksub»«gt»«lt»«ki»«gt»«Name»«lts»«ki»«gt»«lts»«ksub»«gt»’\n' +
    '  Recursion [krec] = ‛«krec»’\n' +
    '  NegativeMatch [lt kspan kstyle keq red gt item lt ksup gt kne lts ksup gt lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«red»«gt»«item»«lt»«ksup»«gt»«kne»«lts»«ksup»«gt»«lts»«kspan»«gt»’\n' +
    '  // Iteration [OneOrMore | ZeroOrMore | Optional\n' +
    '  OneOrMore [Vinculum lt ksub gt k1 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k1»«lts»«ksub»«gt»’\n' +
    '  ZeroOrMore [Vinculum lt ksub gt k0 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k0»«lts»«ksub»«gt»’\n' +
    '  Optional [Vinculum lt ksub gt kq lts ksub gt] = ‛«inculum»«lt»«ksub»«gt»«kq»«lts»«ksub»«gt»’\n' +
    '  Vinculum [lt ku gt MatchItem+ lts ku gt] = ‛«lt»«ku»«gt»«MatchItem»«lts»«ku»«gt»’\n' +
    '  Any [lt kspan kstyle keq green gt kcheckmark lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«green»«gt»«kcheckmark»«lts»«kspan»«gt»’\n' +
    '\n' +
    '  // character\n' +
    '  Tag [koctothorpe Name] = ‛«koctothorpe»«Name»’\n' +
    '  word [lb s rb] = ‛«lb»«s»«rb»’\n' +
    '  string [dq1 s dq2] = ‛«dq1»«s»«dq2»’\n' +
    '  Name [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
    '  NameChar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
    '  // NameChar_other\n' +
    '  // Line\n' +
    '  // space\n' +
    '  // dq\n' +
    '}\n',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 1717,
    ruleName: 'top',
    children: [
      [NonterminalNode],
      [NonterminalNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode]
    ],
    childOffsets: [
         0,    0,    4,    5,
         6,    9, 1715, 1715,
      1716, 1717
    ],
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 1717,
  _rightmostFailures: undefined
}⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename3
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'Find',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'FindSCN',
      source: [Object]
    },
    memoTable: [
      [Object],  [Object],  [Object],  [Object],  undefined, undefined,
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  undefined, undefined,
      undefined, undefined, undefined, [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  undefined,
      [Object],  undefined, undefined, undefined, undefined, undefined,
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      undefined, undefined, undefined, undefined, [Object],  [Object],
      [Object],  undefined, undefined, [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  undefined, [Object],  undefined,
      undefined, [Object],  [Object],  undefined, [Object],  undefined,
      undefined, undefined, undefined, [Object],
      ... 1098 more items
    ],
    input: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>'
  },
  input: '## %20 ❲Find❳\n' +
    '<❲mark❳>❲Loop❳</❲mark❳>\n' +
    '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
    '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
    '      }\n' +
    '\n' +
    '\n' +
    '\n' +
    '  ---\n' +
    '\n' +
    ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
    ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
    '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
    '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
    '\n' +
    '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    '\n' +
    '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
    '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 1197,
    ruleName: 'FindSCN',
    children: [ [IterationNode] ],
    childOffsets: [ 298 ],
    grammar: {
      name: 'Find',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'FindSCN',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 1197,
  _rightmostFailures: undefined
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:25:05] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 108FB0710, reclaim = nil, asString = proc(^Datum) -> string @ 108FB18E0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨{
  _: [ 'Word', 'rt/word.ohm', 'rt/word.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rt/word.sem.js
A
B
C
D⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
A
B
C
D⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨{
  _: [ 'Escapes', 'rt/escapes.ohm', '/tmp/fakepipename1' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename1
A
B
C
D⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
A
B
C
D⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename3
A
B
C
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:28:43] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10BB55A20, reclaim = nil, asString = proc(^Datum) -> string @ 10BB561E0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨{
  _: [ 'Word', 'rt/word.ohm', 'rt/word.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rt/word.sem.js
A
B
C
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'Word',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'input',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], undefined, [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object], [Object], [Object],
      [Object], [Object], [Object],  [Object],
      ... 847 more items
    ],
    input: '## Find\n' +
      '<mark>Loop</mark>\n' +
      '      loop over <sub><i>SymbolListName</i></sub> ⇒ <sub><i>SingleSymbolName</i></sub> {\n' +
      '          <sub><i>TerminationClause</i></sub> <sub><i>Iteration</i></sub> <sub><i>Clause</i></sub>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <mark>TerminationClause</mark>    termination : <sub><i>Clause</i></sub> ;\n' +
      ' - <mark>IterationClause</mark>           iteration : <u><sub><i>Statement</i></sub></u><sub>?</sub>\n' +
      ' - <mark>Clause</mark>\n' +
      '\t- #nested                        { <sub><i>Statement</i></sub> } ↺\n' +
      '\t- #other                         <u><span style="color: #FF76C1;">;<sup>≠</sup></span> <span style="color: #FF76C1;">{<sup>≠</sup></span> <span style="color: #FF76C1;">}<sup>≠</sup></span> <span style="color:#00B040;">✓</span></u><sub>1...</sub>  ↺\n' +
      '\n' +
      '- <mark>Statement</mark>                   <sub><i>Clause</i></sub> ;\n' +
      '\n' +
      '- <mark>SymbolListName</mark>       `=` <sub><i>word</i></sub>\n' +
      '- <mark>SingleSymbolName</mark>  `=` <sub><i>word</i></sub>\n'
  },
  input: '## Find\n' +
    '<mark>Loop</mark>\n' +
    '      loop over <sub><i>SymbolListName</i></sub> ⇒ <sub><i>SingleSymbolName</i></sub> {\n' +
    '          <sub><i>TerminationClause</i></sub> <sub><i>Iteration</i></sub> <sub><i>Clause</i></sub>\n' +
    '      }\n' +
    '\n' +
    '\n' +
    '\n' +
    '  ---\n' +
    '\n' +
    ' - <mark>TerminationClause</mark>    termination : <sub><i>Clause</i></sub> ;\n' +
    ' - <mark>IterationClause</mark>           iteration : <u><sub><i>Statement</i></sub></u><sub>?</sub>\n' +
    ' - <mark>Clause</mark>\n' +
    '\t- #nested                        { <sub><i>Statement</i></sub> } ↺\n' +
    '\t- #other                         <u><span style="color: #FF76C1;">;<sup>≠</sup></span> <span style="color: #FF76C1;">{<sup>≠</sup></span> <span style="color: #FF76C1;">}<sup>≠</sup></span> <span style="color:#00B040;">✓</span></u><sub>1...</sub>  ↺\n' +
    '\n' +
    '- <mark>Statement</mark>                   <sub><i>Clause</i></sub> ;\n' +
    '\n' +
    '- <mark>SymbolListName</mark>       `=` <sub><i>word</i></sub>\n' +
    '- <mark>SingleSymbolName</mark>  `=` <sub><i>word</i></sub>\n',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 946,
    ruleName: 'input',
    children: [ [IterationNode] ],
    childOffsets: [ 0 ],
    grammar: {
      name: 'Word',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'input',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 946,
  _rightmostFailures: undefined
}
rwr
D⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
A
B
C
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object],
      ... 274 more items
    ],
    input: 'Escapes {\n' +
      '  text [c+] = ‛«c»’\n' +
      '  char_string [ldq cs* rdq] = ‛«ldq»«encodeURIComponent (cs)»«rdq»’\n' +
      '  char_comment [kcomment cs* nl] = ‛«kcomment»«encodeURIComponent (cs)»«nl»’\n' +
      '  char_word [lb cs+ rb] = ‛«lb»«encodeURIComponent (cs)»«rb»’\n' +
      '  char_any [c] = ‛«c»’\n' +
      '\n' +
      '  wordchar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
      '  wordchar_bottom [c] = ‛«c»’\n' +
      '\n' +
      '  dq [c] = ‛«c»’\n' +
      '  nl [c] = ‛«c»’\n' +
      '\n' +
      '}\n'
  },
  input: 'Escapes {\n' +
    '  text [c+] = ‛«c»’\n' +
    '  char_string [ldq cs* rdq] = ‛«ldq»«encodeURIComponent (cs)»«rdq»’\n' +
    '  char_comment [kcomment cs* nl] = ‛«kcomment»«encodeURIComponent (cs)»«nl»’\n' +
    '  char_word [lb cs+ rb] = ‛«lb»«encodeURIComponent (cs)»«rb»’\n' +
    '  char_any [c] = ‛«c»’\n' +
    '\n' +
    '  wordchar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
    '  wordchar_bottom [c] = ‛«c»’\n' +
    '\n' +
    '  dq [c] = ‛«c»’\n' +
    '  nl [c] = ‛«c»’\n' +
    '\n' +
    '}\n',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 373,
    ruleName: 'top',
    children: [
      [NonterminalNode],
      [NonterminalNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode]
    ],
    childOffsets: [
       0,   0,   7,   8,   9,
      12, 371, 371, 372, 373
    ],
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 373,
  _rightmostFailures: undefined
}
rwr
D⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨{
  _: [ 'Escapes', 'rt/escapes.ohm', '/tmp/fakepipename1' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename1
A
B
C
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'Escapes',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'text',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object],
      ... 1068 more items
    ],
    input: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color: #FF76C1;">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color:#00B040;">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>'
  },
  input: '## %20 ❲Find❳\n' +
    '<❲mark❳>❲Loop❳</❲mark❳>\n' +
    '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
    '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
    '      }\n' +
    '\n' +
    '\n' +
    '\n' +
    '  ---\n' +
    '\n' +
    ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
    ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
    '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
    '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color: #FF76C1;">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color: #FF76C1;">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color:#00B040;">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
    '\n' +
    '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    '\n' +
    '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
    '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 1167,
    ruleName: 'text',
    children: [ [IterationNode] ],
    childOffsets: [ 0 ],
    grammar: {
      name: 'Escapes',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'text',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 1167,
  _rightmostFailures: undefined
}
rwr
D⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
A
B
C
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    },
    memoTable: [
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object], [Object], [Object],
      [Object], [Object], [Object], [Object],
      ... 1618 more items
    ],
    input: 'Find {\n' +
      '  FindSCN [Heading Rule+ AuxRule*] = ‛«Heading»«Rule»«AuxRule»’\n' +
      '\n' +
      '  Heading [koctothorpe+ kblank Name] = ‛«koctothorpe»«kblank»«Name»’\n' +
      '\n' +
      '  Rule [RuleName RuleBody] = ‛«RuleName»«RuleBody»’\n' +
      '  AuxRule [kdash RuleName RuleBody] = ‛«kdash»«RuleName»«RuleBody»’\n' +
      '\n' +
      '  RuleBody [RuleBranch+] = ‛«RuleBranch»’\n' +
      '\n' +
      '  Branch_tagged [kdash Tag MatchItems+] = ‛«kdash»«Tag»«MatchItems»’\n' +
      '  Branch_untagged [MatchItems+] = ‛«MatchItems»’\n' +
      '\n' +
      '  RuleName [lt kmark gt Name lts kmark2 gt2] = ‛«lt»«kmark»«gt»«Name»«lts»«mark2»«gt2»’\n' +
      '\n' +
      '  // MatchItem - covered by OhmJS\n' +
      '\n' +
      '  RuleApplication [lt ksub gt lt ki gt Name lts ki gt  lts ksub gt] = ‛«lt»«ksub»«gt»«lt»«ki»«gt»«Name»«lts»«ki»«gt»«lts»«ksub»«gt»’\n' +
      '  Recursion [krec] = ‛«krec»’\n' +
      '  NegativeMatch [lt kspan kstyle keq red gt item lt ksup gt kne lts ksup gt lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«red»«gt»«item»«lt»«ksup»«gt»«kne»«lts»«ksup»«gt»«lts»«kspan»«gt»’\n' +
      '  // Iteration [OneOrMore | ZeroOrMore | Optional\n' +
      '  OneOrMore [Vinculum lt ksub gt k1 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k1»«lts»«ksub»«gt»’\n' +
      '  ZeroOrMore [Vinculum lt ksub gt k0 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k0»«lts»«ksub»«gt»’\n' +
      '  Optional [Vinculum lt ksub gt kq lts ksub gt] = ‛«inculum»«lt»«ksub»«gt»«kq»«lts»«ksub»«gt»’\n' +
      '  Vinculum [lt ku gt MatchItem+ lts ku gt] = ‛«lt»«ku»«gt»«MatchItem»«lts»«ku»«gt»’\n' +
      '  Any [lt kspan kstyle keq green gt kcheckmark lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«green»«gt»«kcheckmark»«lts»«kspan»«gt»’\n' +
      '\n' +
      '  // character\n' +
      '  Tag [koctothorpe Name] = ‛«koctothorpe»«Name»’\n' +
      '  word [lb s rb] = ‛«lb»«s»«rb»’\n' +
      '  string [dq1 s dq2] = ‛«dq1»«s»«dq2»’\n' +
      '  Name [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
      '  NameChar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
      '  // NameChar_other\n' +
      '  // Line\n' +
      '  // space\n' +
      '  // dq\n' +
      '}\n'
  },
  input: 'Find {\n' +
    '  FindSCN [Heading Rule+ AuxRule*] = ‛«Heading»«Rule»«AuxRule»’\n' +
    '\n' +
    '  Heading [koctothorpe+ kblank Name] = ‛«koctothorpe»«kblank»«Name»’\n' +
    '\n' +
    '  Rule [RuleName RuleBody] = ‛«RuleName»«RuleBody»’\n' +
    '  AuxRule [kdash RuleName RuleBody] = ‛«kdash»«RuleName»«RuleBody»’\n' +
    '\n' +
    '  RuleBody [RuleBranch+] = ‛«RuleBranch»’\n' +
    '\n' +
    '  Branch_tagged [kdash Tag MatchItems+] = ‛«kdash»«Tag»«MatchItems»’\n' +
    '  Branch_untagged [MatchItems+] = ‛«MatchItems»’\n' +
    '\n' +
    '  RuleName [lt kmark gt Name lts kmark2 gt2] = ‛«lt»«kmark»«gt»«Name»«lts»«mark2»«gt2»’\n' +
    '\n' +
    '  // MatchItem - covered by OhmJS\n' +
    '\n' +
    '  RuleApplication [lt ksub gt lt ki gt Name lts ki gt  lts ksub gt] = ‛«lt»«ksub»«gt»«lt»«ki»«gt»«Name»«lts»«ki»«gt»«lts»«ksub»«gt»’\n' +
    '  Recursion [krec] = ‛«krec»’\n' +
    '  NegativeMatch [lt kspan kstyle keq red gt item lt ksup gt kne lts ksup gt lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«red»«gt»«item»«lt»«ksup»«gt»«kne»«lts»«ksup»«gt»«lts»«kspan»«gt»’\n' +
    '  // Iteration [OneOrMore | ZeroOrMore | Optional\n' +
    '  OneOrMore [Vinculum lt ksub gt k1 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k1»«lts»«ksub»«gt»’\n' +
    '  ZeroOrMore [Vinculum lt ksub gt k0 lts ksub gt] = ‛«Vinculum»«lt»«ksub»«gt»«k0»«lts»«ksub»«gt»’\n' +
    '  Optional [Vinculum lt ksub gt kq lts ksub gt] = ‛«inculum»«lt»«ksub»«gt»«kq»«lts»«ksub»«gt»’\n' +
    '  Vinculum [lt ku gt MatchItem+ lts ku gt] = ‛«lt»«ku»«gt»«MatchItem»«lts»«ku»«gt»’\n' +
    '  Any [lt kspan kstyle keq green gt kcheckmark lts kspan gt] = ‛«lt»«kspan»«kstyle»«keq»«green»«gt»«kcheckmark»«lts»«kspan»«gt»’\n' +
    '\n' +
    '  // character\n' +
    '  Tag [koctothorpe Name] = ‛«koctothorpe»«Name»’\n' +
    '  word [lb s rb] = ‛«lb»«s»«rb»’\n' +
    '  string [dq1 s dq2] = ‛«dq1»«s»«dq2»’\n' +
    '  Name [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
    '  NameChar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’\n' +
    '  // NameChar_other\n' +
    '  // Line\n' +
    '  // space\n' +
    '  // dq\n' +
    '}\n',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 1717,
    ruleName: 'top',
    children: [
      [NonterminalNode],
      [NonterminalNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode],
      [NonterminalNode],
      [TerminalNode],
      [NonterminalNode],
      [IterationNode]
    ],
    childOffsets: [
         0,    0,    4,    5,
         6,    9, 1715, 1715,
      1716, 1717
    ],
    grammar: {
      name: 'RWR',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'top',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 1717,
  _rightmostFailures: undefined
}
rwr
D⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename3
A
B
C
MatchResult {
  matcher: Matcher {
    grammar: {
      name: 'Find',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'FindSCN',
      source: [Object]
    },
    memoTable: [
      [Object],  [Object],  [Object],  [Object],  undefined, undefined,
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  undefined, undefined,
      undefined, undefined, undefined, [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  undefined,
      [Object],  undefined, undefined, undefined, undefined, undefined,
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      undefined, undefined, undefined, undefined, [Object],  [Object],
      [Object],  undefined, undefined, [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  [Object],  [Object],  [Object],
      [Object],  [Object],  [Object],  undefined, [Object],  undefined,
      undefined, [Object],  [Object],  undefined, [Object],  undefined,
      undefined, undefined, undefined, [Object],
      ... 1098 more items
    ],
    input: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>'
  },
  input: '## %20 ❲Find❳\n' +
    '<❲mark❳>❲Loop❳</❲mark❳>\n' +
    '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
    '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
    '      }\n' +
    '\n' +
    '\n' +
    '\n' +
    '  ---\n' +
    '\n' +
    ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
    ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
    '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
    '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
    '\n' +
    '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
    '\n' +
    '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
    '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
  startExpr: Seq { factors: [ [Apply], [PExpr] ] },
  _cst: NonterminalNode {
    matchLength: 1197,
    ruleName: 'FindSCN',
    children: [ [IterationNode] ],
    childOffsets: [ 298 ],
    grammar: {
      name: 'Find',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'FindSCN',
      source: [Object]
    }
  },
  _cstOffset: 0,
  _rightmostFailurePosition: 1197,
  _rightmostFailures: undefined
}
rwr
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
*** output flushed ***
(base) $ make dev
*** output flushed ***
(base) $ make dev
*** output flushed ***
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:51:40] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 108602780, reclaim = nil, asString = proc(^Datum) -> string @ 108602B10}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨{
  _: [ 'Word', 'rt/word.ohm', 'rt/word.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rt/word.sem.js
A
B
C
[ 'rwr' ]
rwr
D⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
A
B
C
[ 'rwr' ]
rwr
D⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨{
  _: [ 'Escapes', 'rt/escapes.ohm', '/tmp/fakepipename1' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename1
A
B
C
[ 'rwr' ]
rwr
D⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
rwr/rwr.sem.js
A
B
C
[ 'rwr' ]
rwr
D⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
/tmp/fakepipename3
A
B
C
[ 'rwr' ]
rwr
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:52:55] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1073370E0, reclaim = nil, asString = proc(^Datum) -> string @ 107337470}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨{
  _: [ 'Word', 'rt/word.ohm', 'rt/word.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨{
  _: [ 'Escapes', 'rt/escapes.ohm', '/tmp/fakepipename1' ],
  '$0': 'ohmjs/ohmjs.js'
}
[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨{
  _: [ 'RWR', 'rwr/rwr.ohm', 'rwr/rwr.sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
[ 'rwr' ]
rwr
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:54:02] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10C7841C0, reclaim = nil, asString = proc(^Datum) -> string @ 10C784840}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:57:16] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10C4C8120, reclaim = nil, asString = proc(^Datum) -> string @ 10C4C9A70}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [15:59:01] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1096FCEF0, reclaim = nil, asString = proc(^Datum) -> string @ 1096FE1D0}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [16:00:37] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1031731C0, reclaim = nil, asString = proc(^Datum) -> string @ 103173760}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [16:18:56] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1026ABF00, reclaim = nil, asString = proc(^Datum) -> string @ 1026AC790}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
writeFileSync is not defined⎬ <- ⟨OhmJS◦77,input⟩}]

(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [16:19:58] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 10A0113D0, reclaim = nil, asString = proc(^Datum) -> string @ 10A013230}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ ls /tmp
ls /tmp
PFU_711F5E50-978C-41FC-B06E-E77D40F6064C	fakepipename6
com.apple.launchd.WfhR5cpQ5I			fakepipename7
com.google.Keystone				fakepipename8
fakepipename1					junk.lisp
fakepipename2					powerlog
fakepipename3					src
fakepipename4					xxx.odin
fakepipename5
(base) $ pwqd
pwqd
zsh: command not found: pwqd
(base) $ pwd
pwd
/Users/tarvydas/quicklisp/local-projects/find-and-replace
(base) $ ohmjs/ohmjs.js /tmp/fakepipename2 /tmp/fakepipename3 </tmp/src
ohmjs/ohmjs.js /tmp/fakepipename2 /tmp/fakepipename3 </tmp/src

The "path" argument must be of type string or an instance of Buffer or URL. Received undefined
(base) $ ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3 </tmp/srcchm  C-c C-c
(base) $ chmod a+x junk.bash 
chmod a+x junk.bash 
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
A
B
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
A
B

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
A
B
undefined
Bb
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
A
B
undefined
Bb

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
A
B
❳
undefined
undefined
Bb
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
A
B
❳
undefined
undefined
Bb

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 

Line 2, col 1:
  1 | ## %20 ❲Find❳
> 2 | 
      ^
Expected "<"
(base) $ ./junk.bash 
./junk.bash 

while loading operation rwr: ({
FindSCN: function (Heading,Rule,AuxRule) {
_ruleEnter ("FindSCN");
Heading = Heading.rwr ();
Rule = Rule.rwr ().join ('');
AuxRule = AuxRule.rwr ().join ('');

_ruleExit ("FindSCN");
return `${Heading}${Rule}${AuxRule}`;
},
Heading: function (koctothorpe,kblank,Name) {
_ruleEnter ("Heading");
koctothorpe = koctothorpe.rwr ().join ('');
kblank = kblank.rwr ();
Name = Name.rwr ();

_ruleExit ("Heading");
return `${koctothorpe}${kblank}${Name}`;
},
Rule: function (RuleName,RuleBody) {
_ruleEnter ("Rule");
RuleName = RuleName.rwr ();
RuleBody = RuleBody.rwr ();

_ruleExit ("Rule");
return `${RuleName}${RuleBody}`;
},
AuxRule: function (kdash,RuleName,RuleBody) {
_ruleEnter ("AuxRule");
kdash = kdash.rwr ();
RuleName = RuleName.rwr ();
RuleBody = RuleBody.rwr ();

_ruleExit ("AuxRule");
return `${kdash}${RuleName}${RuleBody}`;
},
RuleBody: function (RuleBranch) {
_ruleEnter ("RuleBody");
RuleBranch = RuleBranch.rwr ().join ('');

_ruleExit ("RuleBody");
return `${RuleBranch}`;
},
Branch_tagged: function (kdash,Tag,MatchItems) {
_ruleEnter ("Branch_tagged");
kdash = kdash.rwr ();
Tag = Tag.rwr ();
MatchItems = MatchItems.rwr ().join ('');

_ruleExit ("Branch_tagged");
return `${kdash}${Tag}${MatchItems}`;
},
Branch_untagged: function (MatchItems) {
_ruleEnter ("Branch_untagged");
MatchItems = MatchItems.rwr ().join ('');

_ruleExit ("Branch_untagged");
return `${MatchItems}`;
},
RuleName: function (lt,kmark,gt,Name,lts,kmark2,gt2) {
_ruleEnter ("RuleName");
lt = lt.rwr ();
kmark = kmark.rwr ();
gt = gt.rwr ();
Name = Name.rwr ();
lts = lts.rwr ();
kmark2 = kmark2.rwr ();
gt2 = gt2.rwr ();

_ruleExit ("RuleName");
return `${lt}${kmark}${gt}${Name}${lts}${mark2}${gt2}`;
},
RuleApplication: function (lt,ksub,gt,lt,ki,gt,Name,lts,ki,gt,lts,ksub,gt) {
_ruleEnter ("RuleApplication");
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
lt = lt.rwr ();
ki = ki.rwr ();
gt = gt.rwr ();
Name = Name.rwr ();
lts = lts.rwr ();
ki = ki.rwr ();
gt = gt.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("RuleApplication");
return `${lt}${ksub}${gt}${lt}${ki}${gt}${Name}${lts}${ki}${gt}${lts}${ksub}${gt}`;
},
Recursion: function (krec) {
_ruleEnter ("Recursion");
krec = krec.rwr ();

_ruleExit ("Recursion");
return `${krec}`;
},
NegativeMatch: function (lt,kspan,kstyle,keq,red,gt,item,lt,ksup,gt,kne,lts,ksup,gt,lts,kspan,gt) {
_ruleEnter ("NegativeMatch");
lt = lt.rwr ();
kspan = kspan.rwr ();
kstyle = kstyle.rwr ();
keq = keq.rwr ();
red = red.rwr ();
gt = gt.rwr ();
item = item.rwr ();
lt = lt.rwr ();
ksup = ksup.rwr ();
gt = gt.rwr ();
kne = kne.rwr ();
lts = lts.rwr ();
ksup = ksup.rwr ();
gt = gt.rwr ();
lts = lts.rwr ();
kspan = kspan.rwr ();
gt = gt.rwr ();

_ruleExit ("NegativeMatch");
return `${lt}${kspan}${kstyle}${keq}${red}${gt}${item}${lt}${ksup}${gt}${kne}${lts}${ksup}${gt}${lts}${kspan}${gt}`;
},
OneOrMore: function (Vinculum,lt,ksub,gt,k1,lts,ksub,gt) {
_ruleEnter ("OneOrMore");
Vinculum = Vinculum.rwr ();
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
k1 = k1.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("OneOrMore");
return `${Vinculum}${lt}${ksub}${gt}${k1}${lts}${ksub}${gt}`;
},
ZeroOrMore: function (Vinculum,lt,ksub,gt,k0,lts,ksub,gt) {
_ruleEnter ("ZeroOrMore");
Vinculum = Vinculum.rwr ();
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
k0 = k0.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("ZeroOrMore");
return `${Vinculum}${lt}${ksub}${gt}${k0}${lts}${ksub}${gt}`;
},
Optional: function (Vinculum,lt,ksub,gt,kq,lts,ksub,gt) {
_ruleEnter ("Optional");
Vinculum = Vinculum.rwr ();
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
kq = kq.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("Optional");
return `${inculum}${lt}${ksub}${gt}${kq}${lts}${ksub}${gt}`;
},
Vinculum: function (lt,ku,gt,MatchItem,lts,ku,gt) {
_ruleEnter ("Vinculum");
lt = lt.rwr ();
ku = ku.rwr ();
gt = gt.rwr ();
MatchItem = MatchItem.rwr ().join ('');
lts = lts.rwr ();
ku = ku.rwr ();
gt = gt.rwr ();

_ruleExit ("Vinculum");
return `${lt}${ku}${gt}${MatchItem}${lts}${ku}${gt}`;
},
Any: function (lt,kspan,kstyle,keq,green,gt,kcheckmark,lts,kspan,gt) {
_ruleEnter ("Any");
lt = lt.rwr ();
kspan = kspan.rwr ();
kstyle = kstyle.rwr ();
keq = keq.rwr ();
green = green.rwr ();
gt = gt.rwr ();
kcheckmark = kcheckmark.rwr ();
lts = lts.rwr ();
kspan = kspan.rwr ();
gt = gt.rwr ();

_ruleExit ("Any");
return `${lt}${kspan}${kstyle}${keq}${green}${gt}${kcheckmark}${lts}${kspan}${gt}`;
},
character: function (c) {
_ruleEnter ("character");
c = c.rwr ();

_ruleExit ("character");
return `${c}`;
},
Tag: function (koctothorpe,Name) {
_ruleEnter ("Tag");
koctothorpe = koctothorpe.rwr ();
Name = Name.rwr ();

_ruleExit ("Tag");
return `${koctothorpe}${Name}`;
},
word: function (lb,s,rb) {
_ruleEnter ("word");
lb = lb.rwr ();
s = s.rwr ();
rb = rb.rwr ();

_ruleExit ("word");
return `${lb}${s}${rb}`;
},
string: function (dq1,s,dq2) {
_ruleEnter ("string");
dq1 = dq1.rwr ();
s = s.rwr ();
dq2 = dq2.rwr ();

_ruleExit ("string");
return `${dq1}${s}${dq2}`;
},
Name: function (lb,cs,rb) {
_ruleEnter ("Name");
console.error ('A');
lb = lb.rwr ();
console.error ('B');
console.error (lb);
console.error (cs);
console.error (rb);
console.error ('Bb');
cs = cs.rwr ().join ('');
console.error ('C');
rb = rb.rwr ();
console.error ('D');

_ruleExit ("Name");
return `${lb}${cs}${rb}`;
},
NameChar_rec: function (lb,cs,rb) {
_ruleEnter ("NameChar_rec");
lb = lb.rwr ();
cs = cs.rwr ().join ('');
rb = rb.rwr ();

_ruleExit ("NameChar_rec");
return `${lb}${cs}${rb}`;
},
NameChar_other: function (c) {
_ruleEnter ("NameChar_other");
c = c.rwr ();

_ruleExit ("NameChar_other");
return `${c}`;
},
Line: function (c) {
_ruleEnter ("Line");
c = c.rwr ();

_ruleExit ("Line");
return `${c}`;
},
space: function (c) {
_ruleEnter ("space");
c = c.rwr ();

_ruleExit ("space");
return `${c}`;
},
dq: function (c) {
_ruleEnter ("dq");
c = c.rwr ();

_ruleExit ("dq");
return `${c}`;
},

    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); },
    spaces: function (x) { return this.sourceString; },
    space: function (x) { return this.sourceString; }
}): Found errors in the action dictionary of the 'rwr' operation:
- Semantic action 'FindSCN' has the wrong arity: expected 1, got 3
(base) $ pwd
pwd
/Users/tarvydas/quicklisp/local-projects/find-and-replace
(base) $ pushd /tmp
pushd /tmp
/tmp ~/quicklisp/local-projects/find-and-replace
(base) $ ls
ls
PFU_711F5E50-978C-41FC-B06E-E77D40F6064C	fakepipename7
com.apple.launchd.WfhR5cpQ5I			fakepipename8
com.google.Keystone				hold-fakepipename2
fakepipename1					junk.lisp
fakepipename2					powerlog
fakepipename3					src
fakepipename4					srcsrc
fakepipename5					xxx.odin
fakepipename6
(base) $ ls -l
ls -l
total 96
drwxr-xr-x  3 tarvydas  wheel    96  8 Oct 04:59 PFU_711F5E50-978C-41FC-B06E-E77D40F6064C
drwx------  3 tarvydas  wheel    96  8 Oct 04:57 com.apple.launchd.WfhR5cpQ5I
drwxr-xr-x@ 4 tarvydas  wheel   128  8 Oct 04:58 com.google.Keystone
-rw-r--r--@ 1 tarvydas  wheel  1572  9 Oct 12:19 fakepipename1
-rw-r--r--@ 1 tarvydas  wheel  1624  9 Oct 19:09 fakepipename2
-rw-r--r--@ 1 tarvydas  wheel  6272  9 Oct 12:26 fakepipename3
-rw-r--r--@ 1 tarvydas  wheel     0  9 Oct 09:56 fakepipename4
-rw-r--r--@ 1 tarvydas  wheel     0  9 Oct 09:56 fakepipename5
-rw-r--r--@ 1 tarvydas  wheel  1639  9 Oct 09:56 fakepipename6
-rw-r--r--@ 1 tarvydas  wheel  2019  9 Oct 09:56 fakepipename7
-rw-r--r--@ 1 tarvydas  wheel     0  9 Oct 09:56 fakepipename8
-rw-r--r--@ 1 tarvydas  wheel  1639  9 Oct 19:08 hold-fakepipename2
-rw-r--r--@ 1 tarvydas  wheel  2796  9 Oct 10:48 junk.lisp
drwxr-xr-x  2 root      wheel    64  8 Oct 04:56 powerlog
-rw-r--r--@ 1 tarvydas  wheel    18  9 Oct 12:29 src
-rw-r--r--@ 1 tarvydas  wheel  1647  9 Oct 12:29 srcsrc
-rw-r--r--@ 1 tarvydas  wheel  8114  8 Oct 08:46 xxx.odin
(base) $ pwd
pwd
/tmp
(base) $ pushd
pushd
~/quicklisp/local-projects/find-and-replace /tmp
(base) $ make dev
make dev
rm -f find-and-replace
odin run . -debug -o:none

*** starting logger level Info ***
[INFO ] --- [23:16:45] 
(main
(Front End
(Delineate Words
(word◦1)
(Transpiler
(All Before 4
(deracer◦2)
(deracer◦3)
(deracer◦4))
(OhmJS◦5)
(fakepipe
(deracer◦6)
(fakepipename◦7)
(syncfilewrite2◦8)
(deracer◦9)
(trash◦10))
(fakepipe
(deracer◦11)
(fakepipename◦12)
(syncfilewrite2◦13)
(deracer◦14)
(trash◦15)))
(wordjs◦16)
(word◦17))
(Escape Whitespace
(escapesohm◦18)
(escapes◦19)
(escapesrwr◦20)
(Rewriter
(Transpiler
(All Before 4
(deracer◦21)
(deracer◦22)
(deracer◦23))
(OhmJS◦24)
(fakepipe
(deracer◦25)
(fakepipename◦26)
(syncfilewrite2◦27)
(deracer◦28)
(trash◦29))
(fakepipe
(deracer◦30)
(fakepipename◦31)
(syncfilewrite2◦32)
(deracer◦33)
(trash◦34)))
(rwr◦35)
(rwrohm◦36)
(rwrsemjs◦37)
(Read Text File
(Low Level Read Text File◦38)
(Ensure String Datum◦39))
(Transpiler
(All Before 4
(deracer◦40)
(deracer◦41)
(deracer◦42))
(OhmJS◦43)
(fakepipe
(deracer◦44)
(fakepipename◦45)
(syncfilewrite2◦46)
(deracer◦47)
(trash◦48))
(fakepipe
(deracer◦49)
(fakepipename◦50)
(syncfilewrite2◦51)
(deracer◦52)
(trash◦53))))))
(Read Text File
(Low Level Read Text File◦54)
(Ensure String Datum◦55))
(Back End
($m4 fr/find.ohm)
($m4 fr/find.rwr)
(iRewriter
(?◦56)
(rwr◦57)
(rwrohm◦58)
(rwrsemjs◦59)
(Transpiler
(All Before 4
(deracer◦60)
(deracer◦61)
(deracer◦62))
(OhmJS◦63)
(fakepipe
(deracer◦64)
(fakepipename◦65)
(syncfilewrite2◦66)
(deracer◦67)
(trash◦68))
(fakepipe
(deracer◦69)
(fakepipename◦70)
(syncfilewrite2◦71)
(deracer◦72)
(trash◦73)))
(Transpiler
(All Before 4
(deracer◦74)
(deracer◦75)
(deracer◦76))
(OhmJS◦77)
(fakepipe
(deracer◦78)
(fakepipename◦79)
(syncfilewrite2◦80)
(deracer◦81)
(trash◦82))
(fakepipe
(deracer◦83)
(fakepipename◦84)
(syncfilewrite2◦85)
(deracer◦86)
(trash◦87))))
(find◦88))
(Decode
($rt/decode.js)))

ohmjs_maybe: ohmjs/ohmjs.js Word rt/word.ohm rt/word.sem.js
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Escapes rt/escapes.ohm /tmp/fakepipename1
?◦56 &Datum{data = any{}, clone = proc(^Datum) -> ^Datum @ 1011916C0, reclaim = nil, asString = proc(^Datum) -> string @ 101191A50}
ohmjs_maybe: ohmjs/ohmjs.js RWR rwr/rwr.ohm rwr/rwr.sem.js
ohmjs_maybe: ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3


--- Outputs ---
[{«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦5,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦24,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦43,input⟩}, {«error» ⎨[ 'rwr' ]
rwr⎬ <- ⟨OhmJS◦63,input⟩}, {«output» ⎨[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name⎬ <- ⟨OhmJS◦77,input⟩}, {«error» ⎨[ 'rwr' ]
rwr
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
Cannot read property 'rwr' of undefined⎬ <- ⟨OhmJS◦77,input⟩}]
[1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
(base) $ls
ls
#find.md#		TODO.md~		junk.lisp		process
#junk.txt#		Untitled.md		junk.lisp~		registry0d
0d			debug			junk.txt		rt
Key Ideas.md		doc			leaf0d			rwr
Loop syntax.md		experminents.md		loop syntax.md~		syntax
Makefile		find-and-replace	main.odin		test.md
Makefile~		find-and-replace.dSYM	ohmjs			test.md~
README.md		find-and-replace.drawio	old-find.ohm		tokenized.md
README.md~		fr			out			tokenized.md~
TODO.md			junk.bash		parsing atoms.md	user0d
(base) $ ls *junk.bash 
ls *junk.bash 
junk.bash
(base) $ cat junk.bash
cat junk.bash
ohmjs/ohmjs.js Find /tmp/fakepipename2 /tmp/fakepipename3 </tmp/src
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name

Cannot read property 'rwr' of undefined
(base) $ ls -l /tmp
ls -l /tmp
lrwxr-xr-x@ 1 root  wheel  11 12 May 18:29 /tmp -> private/tmp
(base) $ pushd
pushd
/tmp ~/quicklisp/local-projects/find-and-replace
(base) $ ls -l
ls -l
total 96
drwxr-xr-x  3 tarvydas  wheel    96  8 Oct 04:59 PFU_711F5E50-978C-41FC-B06E-E77D40F6064C
drwx------  3 tarvydas  wheel    96  8 Oct 04:57 com.apple.launchd.WfhR5cpQ5I
drwxr-xr-x@ 4 tarvydas  wheel   128  8 Oct 04:58 com.google.Keystone
-rw-r--r--@ 1 tarvydas  wheel  1572  9 Oct 19:16 fakepipename1
-rw-r--r--@ 1 tarvydas  wheel  1639  9 Oct 19:16 fakepipename2
-rw-r--r--@ 1 tarvydas  wheel  6106  9 Oct 19:16 fakepipename3
-rw-r--r--@ 1 tarvydas  wheel     0  9 Oct 09:56 fakepipename4
-rw-r--r--@ 1 tarvydas  wheel     0  9 Oct 09:56 fakepipename5
-rw-r--r--@ 1 tarvydas  wheel  1639  9 Oct 09:56 fakepipename6
-rw-r--r--@ 1 tarvydas  wheel  2019  9 Oct 09:56 fakepipename7
-rw-r--r--@ 1 tarvydas  wheel     0  9 Oct 09:56 fakepipename8
-rw-r--r--@ 1 tarvydas  wheel  1639  9 Oct 19:08 hold-fakepipename2
-rw-r--r--@ 1 tarvydas  wheel  2796  9 Oct 10:48 junk.lisp
drwxr-xr-x  2 root      wheel    64  8 Oct 04:56 powerlog
-rw-r--r--@ 1 tarvydas  wheel  1647  9 Oct 19:17 src
-rw-r--r--@ 1 tarvydas  wheel  1647  9 Oct 12:29 srcsrc
-rw-r--r--@ 1 tarvydas  wheel  8114  8 Oct 08:46 xxx.odin
(base) $ pwd
 pwd
/tmp
(base) $ pushd
pushd
~/quicklisp/local-projects/find-and-replace /tmp
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
Wrapper {
  _node: TerminalNode { matchLength: 1 },
  source: {
    sourceString: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
    startIdx: 352,
    endIdx: 353
  },
  _baseInterval: {
    sourceString: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
    startIdx: 340,
    endIdx: 353
  },
  _childWrappers: [],
  _semantics: Semantics {
    grammar: {
      name: 'Find',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'FindSCN',
      source: [Object]
    },
    checkedActionDicts: true,
    Wrapper: [Function: Wrapper],
    super: Semantics {
      grammar: [Object],
      checkedActionDicts: true,
      Wrapper: [Function: Wrapper],
      super: null,
      operations: [Object: null prototype],
      attributes: [Object: null prototype] {},
      attributeKeys: [Object: null prototype] {}
    },
    operations: Object <[Object: null prototype]> { rwr: [Operation] },
    attributes: Object <[Object: null prototype] {}> {},
    attributeKeys: [Object: null prototype] {}
  }
}
undefined
undefined
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
Wrapper {
  _node: TerminalNode { matchLength: 1 },
  source: {
    sourceString: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
    startIdx: 352,
    endIdx: 353
  },
  _baseInterval: {
    sourceString: '## %20 ❲Find❳\n' +
      '<❲mark❳>❲Loop❳</❲mark❳>\n' +
      '      ❲loop❳ ❲over❳ <❲sub❳><❲i❳>❲SymbolListName❳</❲i❳></❲sub❳> ⇒ <❲sub❳><❲i❳>❲SingleSymbolName❳</❲i❳></❲sub❳> {\n' +
      '          <❲sub❳><❲i❳>❲TerminationClause❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Iteration❳</❲i❳></❲sub❳> <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳>\n' +
      '      }\n' +
      '\n' +
      '\n' +
      '\n' +
      '  ---\n' +
      '\n' +
      ' - <❲mark❳>❲TerminationClause❳</❲mark❳>    ❲termination❳ : <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      ' - <❲mark❳>❲IterationClause❳</❲mark❳>           ❲iteration❳ : <❲u❳><❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳></❲u❳><❲sub❳>?</❲sub❳>\n' +
      ' - <❲mark❳>❲Clause❳</❲mark❳>\n' +
      '\t- #❲nested❳                        { <❲sub❳><❲i❳>❲Statement❳</❲i❳></❲sub❳> } ↺\n' +
      '\t- #❲other❳                         <❲u❳><❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">;<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">{<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%20%23FF76C1%3B">}<❲sup❳>≠</❲sup❳></❲span❳> <❲span❳ ❲style❳="color%3A%2300B040%3B">✓</❲span❳></❲u❳><❲sub❳>1...</❲sub❳>  ↺\n' +
      '\n' +
      '- <❲mark❳>❲Statement❳</❲mark❳>                   <❲sub❳><❲i❳>❲Clause❳</❲i❳></❲sub❳> ;\n' +
      '\n' +
      '- <❲mark❳>❲SymbolListName❳</❲mark❳>       `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>\n' +
      '- <❲mark❳>❲SingleSymbolName❳</❲mark❳>  `=` <❲sub❳><❲i❳>❲word❳</❲i❳></❲sub❳>',
    startIdx: 340,
    endIdx: 353
  },
  _childWrappers: [],
  _semantics: Semantics {
    grammar: {
      name: 'Find',
      superGrammar: [Object],
      rules: [Object],
      defaultStartRule: 'FindSCN',
      source: [Object]
    },
    checkedActionDicts: true,
    Wrapper: [Function: Wrapper],
    super: Semantics {
      grammar: [Object],
      checkedActionDicts: true,
      Wrapper: [Function: Wrapper],
      super: null,
      operations: [Object: null prototype],
      attributes: [Object: null prototype] {},
      attributeKeys: [Object: null prototype] {}
    },
    operations: Object <[Object: null prototype]> { rwr: [Operation] },
    attributes: Object <[Object: null prototype] {}> {},
    attributeKeys: [Object: null prototype] {}
  }
}
undefined
undefined

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
false
true
true
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/fakepipename2', '/tmp/fakepipename3' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
false
true
true

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 

while loading operation rwr: ({
FindSCN: function (Heading,Rule,AuxRule) {
_ruleEnter ("FindSCN");
Heading = Heading.rwr ();
Rule = Rule.rwr ().join ('');
AuxRule = AuxRule.rwr ().join ('');

_ruleExit ("FindSCN");
return `${Heading}${Rule}${AuxRule}`;
},
Heading: function (koctothorpe,kblank,Name) {
_ruleEnter ("Heading");
koctothorpe = koctothorpe.rwr ().join ('');
kblank = kblank.rwr ();
Name = Name.rwr ();

_ruleExit ("Heading");
return `${koctothorpe}${kblank}${Name}`;
},
Rule: function (RuleName,RuleBody) {
_ruleEnter ("Rule");
RuleName = RuleName.rwr ();
RuleBody = RuleBody.rwr ();

_ruleExit ("Rule");
return `${RuleName}${RuleBody}`;
},
AuxRule: function (kdash,RuleName,RuleBody) {
_ruleEnter ("AuxRule");
kdash = kdash.rwr ();
RuleName = RuleName.rwr ();
RuleBody = RuleBody.rwr ();

_ruleExit ("AuxRule");
return `${kdash}${RuleName}${RuleBody}`;
},
RuleBody: function (RuleBranch) {
_ruleEnter ("RuleBody");
RuleBranch = RuleBranch.rwr ().join ('');

_ruleExit ("RuleBody");
return `${RuleBranch}`;
},
Branch_tagged: function (kdash,Tag,MatchItems) {
_ruleEnter ("Branch_tagged");
kdash = kdash.rwr ();
Tag = Tag.rwr ();
MatchItems = MatchItems.rwr ().join ('');

_ruleExit ("Branch_tagged");
return `${kdash}${Tag}${MatchItems}`;
},
Branch_untagged: function (MatchItems) {
_ruleEnter ("Branch_untagged");
MatchItems = MatchItems.rwr ().join ('');

_ruleExit ("Branch_untagged");
return `${MatchItems}`;
},
RuleName: function (lt,kmark,gt,Name,lts,kmark2,gt2) {
_ruleEnter ("RuleName");
lt = lt.rwr ();
kmark = kmark.rwr ();
gt = gt.rwr ();
Name = Name.rwr ();
lts = lts.rwr ();
kmark2 = kmark2.rwr ();
gt2 = gt2.rwr ();

_ruleExit ("RuleName");
return `${lt}${kmark}${gt}${Name}${lts}${mark2}${gt2}`;
},
RuleApplication: function (lt,ksub,gt,lt,ki,gt,Name,lts,ki,gt,lts,ksub,gt) {
_ruleEnter ("RuleApplication");
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
lt = lt.rwr ();
ki = ki.rwr ();
gt = gt.rwr ();
Name = Name.rwr ();
lts = lts.rwr ();
ki = ki.rwr ();
gt = gt.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("RuleApplication");
return `${lt}${ksub}${gt}${lt}${ki}${gt}${Name}${lts}${ki}${gt}${lts}${ksub}${gt}`;
},
Recursion: function (krec) {
_ruleEnter ("Recursion");
krec = krec.rwr ();

_ruleExit ("Recursion");
return `${krec}`;
},
NegativeMatch: function (lt,kspan,kstyle,keq,red,gt,item,lt,ksup,gt,kne,lts,ksup,gt,lts,kspan,gt) {
_ruleEnter ("NegativeMatch");
lt = lt.rwr ();
kspan = kspan.rwr ();
kstyle = kstyle.rwr ();
keq = keq.rwr ();
red = red.rwr ();
gt = gt.rwr ();
item = item.rwr ();
lt = lt.rwr ();
ksup = ksup.rwr ();
gt = gt.rwr ();
kne = kne.rwr ();
lts = lts.rwr ();
ksup = ksup.rwr ();
gt = gt.rwr ();
lts = lts.rwr ();
kspan = kspan.rwr ();
gt = gt.rwr ();

_ruleExit ("NegativeMatch");
return `${lt}${kspan}${kstyle}${keq}${red}${gt}${item}${lt}${ksup}${gt}${kne}${lts}${ksup}${gt}${lts}${kspan}${gt}`;
},
OneOrMore: function (Vinculum,lt,ksub,gt,k1,lts,ksub,gt) {
_ruleEnter ("OneOrMore");
Vinculum = Vinculum.rwr ();
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
k1 = k1.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("OneOrMore");
return `${Vinculum}${lt}${ksub}${gt}${k1}${lts}${ksub}${gt}`;
},
ZeroOrMore: function (Vinculum,lt,ksub,gt,k0,lts,ksub,gt) {
_ruleEnter ("ZeroOrMore");
Vinculum = Vinculum.rwr ();
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
k0 = k0.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("ZeroOrMore");
return `${Vinculum}${lt}${ksub}${gt}${k0}${lts}${ksub}${gt}`;
},
Optional: function (Vinculum,lt,ksub,gt,kq,lts,ksub,gt) {
_ruleEnter ("Optional");
Vinculum = Vinculum.rwr ();
lt = lt.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();
kq = kq.rwr ();
lts = lts.rwr ();
ksub = ksub.rwr ();
gt = gt.rwr ();

_ruleExit ("Optional");
return `${inculum}${lt}${ksub}${gt}${kq}${lts}${ksub}${gt}`;
},
Vinculum: function (lt,ku,gt,MatchItem,lts,ku,gt) {
_ruleEnter ("Vinculum");
lt = lt.rwr ();
ku = ku.rwr ();
gt = gt.rwr ();
MatchItem = MatchItem.rwr ().join ('');
lts = lts.rwr ();
ku = ku.rwr ();
gt = gt.rwr ();

_ruleExit ("Vinculum");
return `${lt}${ku}${gt}${MatchItem}${lts}${ku}${gt}`;
},
Any: function (lt,kspan,kstyle,keq,green,gt,kcheckmark,lts,kspan,gt) {
_ruleEnter ("Any");
lt = lt.rwr ();
kspan = kspan.rwr ();
kstyle = kstyle.rwr ();
keq = keq.rwr ();
green = green.rwr ();
gt = gt.rwr ();
kcheckmark = kcheckmark.rwr ();
lts = lts.rwr ();
kspan = kspan.rwr ();
gt = gt.rwr ();

_ruleExit ("Any");
return `${lt}${kspan}${kstyle}${keq}${green}${gt}${kcheckmark}${lts}${kspan}${gt}`;
},
character: function (c) {
_ruleEnter ("character");
c = c.rwr ();

_ruleExit ("character");
return `${c}`;
},
Tag: function (koctothorpe,Name) {
_ruleEnter ("Tag");
koctothorpe = koctothorpe.rwr ();
Name = Name.rwr ();

_ruleExit ("Tag");
return `${koctothorpe}${Name}`;
},
word: function (lb,s,rb) {
_ruleEnter ("word");
lb = lb.rwr ();
s = s.rwr ();
rb = rb.rwr ();

_ruleExit ("word");
return `${lb}${s}${rb}`;
},
string: function (dq1,s,dq2) {
_ruleEnter ("string");
dq1 = dq1.rwr ();
s = s.rwr ();
dq2 = dq2.rwr ();

_ruleExit ("string");
return `${dq1}${s}${dq2}`;
},



Name: function (lb,cs,rb) {
_ruleEnter ("Name");

console.error (`lb is undefined ${lb === undefined`);
console.error (`cs is undefined ${cs === undefined}`);
console.error (`rb is undefined ${rb === undefined}`);

lb = lb.rwr ();
cs = cs.rwr ().join ('');
rb = rb.rwr ();

_ruleExit ("Name");
return `${lb}${cs}${rb}`;
},




NameChar_rec: function (lb,cs,rb) {
_ruleEnter ("NameChar_rec");
lb = lb.rwr ();
cs = cs.rwr ().join ('');
rb = rb.rwr ();

_ruleExit ("NameChar_rec");
return `${lb}${cs}${rb}`;
},
NameChar_other: function (c) {
_ruleEnter ("NameChar_other");
c = c.rwr ();

_ruleExit ("NameChar_other");
return `${c}`;
},
Line: function (c) {
_ruleEnter ("Line");
c = c.rwr ();

_ruleExit ("Line");
return `${c}`;
},
space: function (c) {
_ruleEnter ("space");
c = c.rwr ();

_ruleExit ("space");
return `${c}`;
},
dq: function (c) {
_ruleEnter ("dq");
c = c.rwr ();

_ruleExit ("dq");
return `${c}`;
},

    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); },
    spaces: function (x) { return this.sourceString; },
    space: function (x) { return this.sourceString; }
}
): Missing } in template expression
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
lb is undefined false
cs is undefined true
rb is undefined true
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/grammar.ohm', '/tmp/sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
lb is undefined false
cs is undefined true
rb is undefined true

Cannot read property 'rwr' of undefined
(base) $ ./junk.bash 
./junk.bash 
[ 'rwr' ]
rwr
lb is undefined false
cs is undefined true
rb is undefined true
error during processing of the AST, src written to /tmp/src
{
  _: [ 'Find', '/tmp/grammar.ohm', '/tmp/sem.js' ],
  '$0': 'ohmjs/ohmjs.js'
}
 [1]enter: FindSCN
  [2]enter: AuxRule
   [3]enter: RuleBody
    [4]enter: Branch_untagged
     [5]enter: Name
lb is undefined false
cs is undefined true
rb is undefined true

Cannot read property 'rwr' of undefined
(base) $ git status
git status
On branch dev
Your branch is up to date with 'origin/dev'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .$find-and-replace.drawio.bkp
	modified:   .$find-and-replace.drawio.dtmp
	modified:   .DS_Store
	modified:   .obsidian/workspace.json
	modified:   find-and-replace
	modified:   find-and-replace.dSYM/Contents/Resources/DWARF/find-and-replace
	modified:   find-and-replace.drawio
	modified:   fr/find.rwr
	modified:   leaf0d/leaf0d.odin
	modified:   ohmjs/ohmjs.js

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	fr/#find.rwr#

no changes added to commit (use "git add" and/or "git commit -a")
(base) $ ls*.bash
ls*.bash
zsh: no matches found: ls*.bash
(base) $ ls *.bas