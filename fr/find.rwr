Find {
  FindSCN [Heading Rule+ AuxRule*] = ‛«Heading»«Rule»«AuxRule»’

  Heading [koctothorpe+ kblank Name] = ‛// «Name»’

  Rule [RuleName RuleBody] ‛«_.pushnewbindings ()»«_.bind ("RuleName", RuleName.rwr ())»’ = ‛\n«RuleName» = «RuleBody»«_.popbindings ()»’
  AuxRule [kdash RuleName RuleBody] ‛«_.pushnewbindings ()»«_.bind ("RuleName", RuleName.rwr ())»’ = ‛\n«RuleName» = «RuleBody»«_.popbindings ()»’



  RuleBody [RuleBranch+] = ‛«RuleBranch»’

  Branch_tagged [kdash Tag MatchItems+] = ‛\n | «MatchItems» «Tag»’
  Branch_untagged [MatchItems+] = ‛«MatchItems»’

  RuleName [lt kmark gt Name lts kmark2 gt2] = ‛«Name»’

  Equivalence [keqv klt ksub kgt klt1 ki kgtlb Name krbltsl ki2 kgt2 kltsl2 ksub2 kgt3] = ‛«Name»’

  MatchItem_ruleapplication [x] = ‛«x»’
  MatchItem_opRecursion [x] = ‛«x»’
  MatchItem_negativeMatch [x] = ‛«x»’
  MatchItem_iteration [x] = ‛«x»’
  MatchItem_any [x] = ‛«x»’
  MatchItem_name [x] = ‛ "«x»"’
  MatchItem_character [x] = ‛«x»’

  RuleApplication [lt ksub gt0 lt2 ki gt1 Name lts ki2 gt2  lts2 ksub2 gt3] = ‛ «Name»’
  Recursion [krec] = ‛ «_.fetch ("RuleName")»?’
  NegativeMatch [lt kspan kstyle keq red gt item lt2 ksup gt2 kne lts ksup2 gt3 lts2 kspan2 gt4] = ‛ ~«item»’
  // Iteration [OneOrMore | ZeroOrMore | Optional
  OneOrMore [Vinculum lt ksub gt k1 lts ksub2 gt2] = ‛«Vinculum»+’
  ZeroOrMore [Vinculum lt ksub gt k0 lts ksub2 gt2] = ‛«Vinculum»*’
  Optional [Vinculum lt ksub gt kq lts ksub2 gt2] = ‛«Vinculum»?’
  Vinculum [lt ku gt MatchItem+ lts ku2 gt2] = ‛ («MatchItem»)’
  Any [lt kspan kstyle keq green gt kcheckmark lts kspan2 gt2] = ‛ any’

  character [c] = ‛ "«c»"’ // character
  Tag [koctothorpe Name] = ‛-- «Name»’
  word [lb s rb] = ‛«lb»«s»«rb»’
  string [dq1 s dq2] = ‛«dq1»«s»«dq2»’
  Name [lb cs+ rb] = ‛«lb»«cs»«rb»’
  NameChar_rec [lb cs+ rb] = ‛«lb»«cs»«rb»’
  NameChar_other [c] = ‛«c»’
  line [c] = ‛«c»’ // line
  space [c] = ‛«c»’ // space
  dq [c] = ‛«c»’ // dq
}
